{
  "clazz" : "net.bzk.flow.model.Flow",
  "uid" : "iYEiFn0pKZCN",
  "name" : "SUB-strategy-2y",
  "boxs" : [ {
    "clazz" : "net.bzk.flow.model.Box",
    "uid" : "hLZ3d8T7Vkot",
    "name" : "Strategy",
    "actions" : [ {
      "clazz" : "net.bzk.flow.model.Action$SubFlowAction",
      "uid" : "vWD538GBmnZO",
      "name" : "bottleneck",
      "tryErrorble" : false,
      "enable" : "true",
      "devBoxVars" : { },
      "devFlowVars" : { },
      "minLogLv" : "NONE",
      "flowUid" : "SSPBbWtmfHPV",
      "asynced" : false,
      "inputData" : [ {
        "key" : "__ALL__",
        "val" : "${~__ALL__}"
      } ],
      "outputReflects" : [ {
        "srcKey" : "__pk_result",
        "toKey" : {
          "lv" : "not_specify",
          "key" : "call_resp"
        }
      } ]
    } ],
    "links" : [ ],
    "vars" : { },
    "taskSort" : [ "vWD538GBmnZO" ],
    "whileJudgment" : null,
    "transition" : {
      "toBox" : "",
      "endTag" : "${symbol} ordered:${call_resp.ordered} ${call_resp.breakName}",
      "failEnd" : false,
      "endResultKeys" : [ ],
      "resultCode" : ""
    },
    "minLogLv" : "DEBUG"
  }, {
    "clazz" : "net.bzk.flow.model.Box",
    "uid" : "UQC5RZ3iJLB7",
    "name" : "Box",
    "actions" : [ {
      "clazz" : "net.bzk.flow.model.Action$SubFlowAction",
      "uid" : "xHaqpw4loFKq",
      "name" : "FetchALL",
      "tryErrorble" : false,
      "enable" : "true",
      "devBoxVars" : { },
      "devFlowVars" : { },
      "minLogLv" : "NONE",
      "flowUid" : "lReXow3492HG",
      "asynced" : false,
      "inputData" : [ {
        "key" : "querys",
        "val" : "!javascript===\nlet qs = [];\nlet h24q = `\nfrom(bucket: \"quote\")\n  |> range(start: -1d)\n   |> filter(fn: (r) =>\n    r._measurement == \"realtime\" and\n    r.symbol == \"${symbol}\"\n  ) \n  |> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n  |> map(fn: (r) => ({ r with _value: (r.low + r.open +r.close + r.high)/4.0 }))  \n`;\nlet d7q = `\nfrom(bucket: \"quote\")\n  |> range(start: -7d,stop : -1d)\n   |> filter(fn: (r) =>\n    r._measurement == \"realtime\" and\n    r.symbol == \"${symbol}\"\n  )\n  |> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n  |> map(fn: (r) => ({ r with _value: (r.low + r.open +r.close + r.high)/4.0 }))  \n  |> window(every: 3h)\n  |> mean()   \n  |> duplicate(column: \"_stop\", as: \"_time\")\n  |> window(every: inf)\n`;\nlet y2q = `\nimport \"date\"\nfrom(bucket: \"quote\")\n  |> range(start: -2y, stop:-7d)\n  |> filter(fn: (r) =>\n    r._measurement == \"daily\" and\n    r.symbol == \"${symbol}\"\n  )\n |> map(fn: (r) => ({ r with _time: date.truncate(t: r._time, unit: 1d)    }))\n |> pivot(rowKey:[\"_time\"], columnKey: [\"valmean\"], valueColumn: \"_value\")\n |> map(fn: (r) => ({ r with _value: (r.close + r.open + r.low + r.high)/4.00 })) \n`;\n\nqs.push(h24q);\nqs.push(d7q);\nqs.push(y2q);\nqs;\n\n"
      } ],
      "outputReflects" : [ {
        "srcKey" : "allVals",
        "toKey" : {
          "lv" : "run_flow",
          "key" : "y2Vals"
        }
      }, {
        "srcKey" : "vals_1",
        "toKey" : {
          "lv" : "not_specify",
          "key" : "h24Vals"
        }
      } ]
    }, {
      "clazz" : "net.bzk.flow.model.Action$VarModifyAction",
      "uid" : "Dfq0TAINMBq2",
      "name" : "analyzeVars",
      "tryErrorble" : false,
      "enable" : "true",
      "devBoxVars" : { },
      "devFlowVars" : { },
      "minLogLv" : "NONE",
      "flatData" : [ {
        "key" : "~MACDtrender",
        "val" : "!javascript===\nconst rm = ${cs.macd10m120m};\nconst ops = {\n    logicType:\"MICRO\",\n    peakMaxWaitSeconds:6*60\n};\n$tsFunc.findPeak(rm,ops);"
      }, {
        "key" : "~rsiDif360mTrender",
        "val" : "!javascript===\nconst rm = ${cs.rsiDif360m};\nconst ops = {\n    logicType:\"MICRO\",\n    peakMaxWaitSeconds:5*60*6\n};\n$tsFunc.findPeak(rm,ops);"
      } ]
    }, {
      "clazz" : "net.bzk.flow.model.HttpAction",
      "uid" : "bdp2D8EmHQHn",
      "name" : "BinanceQuote",
      "tryErrorble" : false,
      "enable" : "true",
      "devBoxVars" : { },
      "devFlowVars" : { },
      "minLogLv" : "NONE",
      "url" : "${finExManageApiUrl}",
      "uriVariables" : { },
      "body" : "{\n    \"name\": \"market/get_recent_trades_list\",\n    \"exchange\": \"binance\",\n    \"__bzk_api_key\": \"${finExManageApiKey}\",\n    \"symbol\":\"${symbol}\",\n    \"limit\":50,\n    \"timeMaped\":true\n}",
      "method" : "POST",
      "headers" : { },
      "headersFlat" : "",
      "key" : {
        "lv" : "run_flow",
        "key" : "binanceQuote"
      }
    }, {
      "clazz" : "net.bzk.flow.model.Action$VarModifyAction",
      "uid" : "afqbSMjT5kKT",
      "name" : "Sortout",
      "tryErrorble" : false,
      "enable" : "true",
      "devBoxVars" : { },
      "devFlowVars" : { },
      "minLogLv" : "NONE",
      "flatData" : [ {
        "key" : "~position.LONG",
        "val" : "!javascript===\nconst pos = ${positionInfos};\n\nvar ans = pos.find(function(item, index, array){\n  return item.positionSide == 'LONG';\n});\nans;"
      }, {
        "key" : "~position.SHORT",
        "val" : "!javascript===\nconst pos = ${positionInfos};\n\nvar ans = pos.find(function(item, index, array){\n  return item.positionSide == 'SHORT';\n});\nans;"
      } ]
    }, {
      "clazz" : "net.bzk.flow.model.HttpAction",
      "uid" : "JRXb3aUYrssP",
      "name" : "FetchTSDBAvgs",
      "tryErrorble" : false,
      "enable" : "true",
      "devBoxVars" : {
        "symbol" : "BTC"
      },
      "devFlowVars" : { },
      "minLogLv" : "NONE",
      "url" : "${finProxyUrl}/proxy/tsdb/multiple",
      "uriVariables" : { },
      "body" : "!javascript===!return-json===\n\nlet queryDtos = [];\n\nfunction genRealtimeKQuery(startCount){\n    const startM = (startCount*5)+'m';\n    return `\nfrom(bucket: \"quote\")\n  |> range(start: -`+startM+`)\n  |> filter(fn: (r) =>\n    r._measurement == \"realtime\" and\n    r.symbol == \"${symbol}\" \n  ) \n    |> timeShift(duration: 5m)  \n  `;\n}\n\nfunction genRealtimeMaQuery(maCount5m){\n    const startM = (maCount5m*5*2)+'m';\n    return `\nfrom(bucket: \"quote\")\n  |> range(start: -`+startM+`)\n  |> filter(fn: (r) =>\n    r._measurement == \"realtime\" and\n    r.symbol == \"${symbol}\" \n  )\n  |> timeShift(duration: 5m)  \n  |> movingAverage(n: `+maCount5m+` )\n  |> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n  |> map(fn: (r) => ({ r with _value: (r.low + r.open +r.close + r.high)/4.0 }))  \n  `;\n    \n}\n\nfunction genDayMaQuery(maCount1d){\n    const startD = (maCount1d*3)+'d';\n    return `\nfrom(bucket: \"quote\")\n  |> range(start: -`+startD+`)\n  |> filter(fn: (r) =>\n    r._measurement == \"daily\" and\n    r.valmean == \"open\" and\n    r.symbol == \"${symbol}\" \n  )\n  |> movingAverage(n: `+maCount1d+` )\n  `;\n}\n\nfunction genDifMaQuery(maCount,range,absed,absRate,last){\n    const startM = (range*5)+'m';\n    const absRateSyntax = absed ? '  |>map(fn: (r) => ({ r with _value: math.abs(x: r._value)*'+absRate+' }))  ':'';\n    const lastSyntax = last ? '  |> last()' : '';\n    return `\n    import \"math\"\nfrom(bucket: \"quote\")\n  |> range(start: -`+startM+`)\n   |> filter(fn: (r) =>\n    r._measurement == \"realtime\" and\n    r.symbol == \"${symbol}\" \n  )\n  |> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n  |> map(fn: (r) => ({ r with _value: (r.low + r.close + r.high)/3.0 }))   \n  |> timeShift(duration: 5m)  \n  |> difference()\n  `+absRateSyntax+` \n  |> movingAverage(n: `+maCount+` ) \n    `+lastSyntax;\n}\n\nfunction genMACDQuery(fastCount,slowCount){\n    const startM = (slowCount*5*5)+'m';\n    return `\nfrom(bucket: \"quote\")\n  |> range(start: -`+startM+`)\n  |> filter(fn: (r) =>\n    r._measurement == \"realtime\" and\n    r.symbol == \"${symbol}\" \n  )\n  |> timeShift(duration: 5m)  \n  |> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n  |> map(fn: (r) => ({ r with _value: (r.low + r.open +r.close + r.high)/4.0 }))\n  |> map(fn: (r) => ({ r with cp: r._value   }))\n  |> movingAverage(n: `+fastCount+` )\n  |> map(fn: (r) => ({ r with _fast: r.cp -r._value    }))\n  |> map(fn: (r) => ({ r with _value: r.cp   }))\n  |> movingAverage(n: `+slowCount+` )\n  |> map(fn: (r) => ({ r with _slow: r.cp -r._value   }))\n  |> map(fn: (r) => ({ r with _value: r._slow - r._fast   }))\n  |> movingAverage(n: 9 )\n    `;\n}\n\nfunction genRSIDIF(maCount){\n    const startM = (maCount*5*4)+'m';\n        return `\nfrom(bucket: \"quote\")\n  |> range(start: -`+startM+`)\n   |> filter(fn: (r) =>\n    r._measurement == \"realtime\" and\n    r.symbol == \"${symbol}\" \n  )\n  |> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n  |> map(fn: (r) => ({ r with _value: (r.low + r.close + r.high)/3.0 }))   \n  |> timeShift(duration: 5m) \n  |> map(fn: (r) => ({ r with cp: r._value   }))\n  |> difference()\n  |> movingAverage(n: `+maCount+` ) \n  |> relativeStrengthIndex(n: `+maCount+` ) \n    `;\n}\n\nfunction genSumDIF(){\n        return `\na= from(bucket: \"quote\")\n  |> range(start: -150m)\n   |> filter(fn: (r) =>\n    r._measurement == \"realtime\" and\n    r.symbol == \"${symbol}\" \n  )\n  |> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n  |> map(fn: (r) => ({ r with _value: (r.low + r.close + r.high)/3.0 }))   \n  |> timeShift(duration: 5m)  \n\norg = a\n    |> set(key: \"tag\", value: \"org\")\n    |> group()\n    \nshift = a\n    |> set(key: \"tag\", value: \"shift\")\n    |> timeShift(duration: 30m)\n    |> group()\n\nunion(tables: [org, shift])\n  |> pivot(rowKey:[\"_time\"], columnKey: [\"tag\"], valueColumn: \"_value\")\n  |>map(fn: (r) => ({ r with _value: r.org - r.shift }))   \n  |>map(fn: (r) => ({ r with alias: \"shiftDif\" }))   \n    `;\n}\n\nfunction genKRange(maCount){\n    const startM = (maCount*5*2)+'m';\n        return `\nfrom(bucket: \"quote\")\n  |> range(start: -`+startM+`)\n  |> filter(fn: (r) =>\n    r._measurement == \"realtime\" and\n    r.symbol == \"${symbol}\" \n  )\n  |> timeShift(duration: 5m)  \n  |> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n  |> map(fn: (r) => ({ r with _value: (  r.high-r.low ) }))  \n  |> movingAverage(n: `+maCount+` ) \n    `;\n}\n\nfunction appendQueryDto(query,uid){\n    const dto= {\n        'query':query,\n        'uid':uid\n    };\n    queryDtos.push(dto);\n}\n\nappendQueryDto(genRSIDIF(12*6),'rsiDif360m'); \nappendQueryDto(genSumDIF(),'dif'); \nappendQueryDto(genRealtimeKQuery(12*6),'k5m'); \nappendQueryDto(genDifMaQuery(120,120*2,true,\"8.0\",true),'difTH'); \nappendQueryDto(genMACDQuery(2,72),'macd10m120m'); // macd10m120m\nappendQueryDto(genKRange(12*6),'KRange360m'); // macd10m120m\n\n\nJSON.stringify(queryDtos);",
      "method" : "POST",
      "headers" : { },
      "headersFlat" : "",
      "key" : {
        "lv" : "not_specify",
        "key" : "TSDBAvgs"
      }
    }, {
      "clazz" : "net.bzk.flow.model.Action$PolyglotAction",
      "uid" : "nONU5vc3Jzg8",
      "name" : "CodeSettings",
      "tryErrorble" : false,
      "enable" : "true",
      "devBoxVars" : { },
      "devFlowVars" : { },
      "minLogLv" : "NONE",
      "code" : "const tsdbAvgs = $bzk.g('TSDBAvgs');\nconst tsdbAvgsMap = {};\nconst trimNullMapUids = ['dif'];\nfunction injectTSDBAvgs(){\n    for (const e of tsdbAvgs) {\n        console.log(e);\n        const results = e.get('result');\n        if(results.size()==1){\n            let v =results.get(0).get('values');\n            const uid = e.get('uid');\n            if(trimNullMapUids.includes(uid)){\n                v = $tsFunc.trimNull(v);\n            }\n            tsdbAvgsMap[uid] = v\n            $bzk.putObj('~cs.'+e.get('uid'),v);\n        }else if(results.size()>=2){\n            for(let i=0;i<results.size();i++){\n                const v =results.get(i).get('values');\n                const cols = results.get(i).get('columns');\n                $bzk.putObj('~cs.'+e.get('uid')+'.'+cols.get('_field'),v);\n            }\n        }\n\n    }\n\n}\n\ninjectTSDBAvgs();\n\nconst rMap = ${y2Vals};\n\n\n\nfunction setupWaitPicker(uid,waitCount,_rMap){\n    const ops = {\n        logicType:\"MACRO\",\n        peakMaxWaitSeconds:waitCount*5*60\n    };\n    const ans= $tsFunc.findPeak(_rMap,ops);\n    \n    $bzk.putObj('~'+uid,ans);\n}\n\nfunction setupBigger(prefix,_rMap){\n    const sortIso8601Keys = $tsFunc.sortIso8601Key(_rMap);\n\n    const previousKey = sortIso8601Keys.get(1);\n    const lastKey = sortIso8601Keys.get(0);\n\n\n    $bzk.putObj('~'+prefix+'.previousMax',howBigger(_rMap,true,previousKey));\n    $bzk.putObj('~'+prefix+'.previousMin',howBigger(_rMap,false,previousKey));\n    $bzk.putObj('~'+prefix+'.lastMax',howBigger(_rMap,true,lastKey));\n    $bzk.putObj('~'+prefix+'.lastMin',howBigger(_rMap,false,lastKey));\n    $bzk.putObj('~'+prefix+'.previousVal',getMap(_rMap,previousKey));\n    $bzk.putObj('~'+prefix+'.lastVal',getMap(_rMap,lastKey));\n\n}\n\nfunction getMap(_rMap,key){\n    const ans = _rMap[key];\n    if (ans!=null) return ans;\n    return _rMap.get(key);\n}\n\nfunction howBigger(_rMap,big,key){\n        const obj = {\n            targetKey:key,\n            bigger:big\n        };\n        return $tsFunc.howBigger(_rMap,JSON.stringify(obj));\n}\n\nsetupWaitPicker('cs.difPeak',1,tsdbAvgsMap['dif']);\nsetupBigger('cs.priceBigger',rMap);\nsetupBigger('cs.difBigger',tsdbAvgsMap['dif']);\n\nconst KRange360m = tsdbAvgsMap['KRange360m'];\nconst lastKRange = $tsFunc.getLast(KRange360m);\n$bzk.putObj('~cs.lastKRange',lastKRange);\n\ntrue;",
      "polyglot" : "js",
      "resultLv" : "not_specify",
      "resultKey" : "analyzeAll"
    }, {
      "clazz" : "net.bzk.flow.model.HttpAction",
      "uid" : "YXOO8IaDkXfV",
      "name" : "PositionInfo",
      "tryErrorble" : false,
      "enable" : "true",
      "devBoxVars" : { },
      "devFlowVars" : { },
      "minLogLv" : "NONE",
      "url" : "${finExManageApiUrl}",
      "uriVariables" : { },
      "body" : "{\n    \"symbol\":\"${symbol}\",\n    \"name\": \"position/get\",\n    \"exchange\": \"binance\",\n    \"__bzk_api_key\": \"${finExManageApiKey}\"\n}",
      "method" : "POST",
      "headers" : { },
      "headersFlat" : "",
      "key" : {
        "lv" : "not_specify",
        "key" : "positionInfos"
      }
    }, {
      "clazz" : "net.bzk.flow.model.HttpAction",
      "uid" : "VOW12BtJqie5",
      "name" : "SyncOrder",
      "tryErrorble" : false,
      "enable" : "true",
      "devBoxVars" : { },
      "devFlowVars" : { },
      "minLogLv" : "NONE",
      "url" : "${finExManageApiUrl}",
      "uriVariables" : { },
      "body" : "{\n    \"name\": \"order/monitor/sync\",\n    \"exchange\": \"binance\",\n    \"prd_name\": \"${symbol}\",\n    \"__bzk_api_key\": \"${finExManageApiKey}\"\n}",
      "method" : "POST",
      "headers" : { },
      "headersFlat" : "",
      "key" : {
        "lv" : "not_specify",
        "key" : "syncResp"
      }
    }, {
      "clazz" : "net.bzk.flow.model.HttpAction",
      "uid" : "RLwmvyfnRDzM",
      "name" : "LastDif",
      "tryErrorble" : false,
      "enable" : "true",
      "devBoxVars" : { },
      "devFlowVars" : { },
      "minLogLv" : "NONE",
      "url" : "${finExManageApiUrl}",
      "uriVariables" : { },
      "body" : "{\n    \"name\": \"order_pack/last\",\n    \"exchange\": \"binance\",\n     \"filter_map\": {\n        \"LONG\": {\n            \"prd_name\": \"${symbol}\",\n            \"positionSide\":\"LONG\",\n            \"attach_name_IN\":[\"DifTrace\",\"DifTraced\"]\n        },\n        \"SHORT\": {\n            \"prd_name\": \"${symbol}\",\n            \"positionSide\":\"SHORT\",\n            \"attach_name_IN\":[\"DifTrace\",\"DifTraced\"]\n        }\n    },\n    \"__bzk_api_key\": \"${finExManageApiKey}\"\n}",
      "method" : "POST",
      "headers" : { },
      "headersFlat" : "",
      "key" : {
        "lv" : "run_flow",
        "key" : "lastDifMap"
      }
    } ],
    "links" : [ ],
    "vars" : { },
    "taskSort" : [ "VOW12BtJqie5", "JRXb3aUYrssP", "xHaqpw4loFKq", "nONU5vc3Jzg8", "Dfq0TAINMBq2", "YXOO8IaDkXfV", "bdp2D8EmHQHn", "afqbSMjT5kKT", "RLwmvyfnRDzM" ],
    "whileJudgment" : null,
    "transition" : {
      "toBox" : "hLZ3d8T7Vkot",
      "endTag" : null,
      "failEnd" : false,
      "endResultKeys" : [ ],
      "resultCode" : ""
    },
    "minLogLv" : "DEBUG"
  } ],
  "varCfgNames" : [ "fin-proxy.json", "fin-exchange-manage.json" ],
  "vars" : {
    "symbol" : "BTC"
  },
  "entry" : {
    "clazz" : "net.bzk.flow.model.Entry$PluginEntry",
    "boxUid" : "UQC5RZ3iJLB7",
    "autoRegister" : false,
    "requiredKeys" : [ "symbol" ],
    "outputKeys" : [ ]
  },
  "threadCfg" : {
    "corePoolSize" : 10,
    "maximumPoolSize" : 50,
    "keepAliveTime" : 500,
    "aliveUnit" : "MINUTES"
  },
  "version" : 211
}
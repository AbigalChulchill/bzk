{
  "clazz" : "net.bzk.flow.model.Flow",
  "uid" : "iYEiFn0pKZCN",
  "name" : "SUB-strategy-2y",
  "boxs" : [ {
    "clazz" : "net.bzk.flow.model.Box",
    "uid" : "hLZ3d8T7Vkot",
    "name" : "Strategy",
    "actions" : [ {
      "clazz" : "net.bzk.flow.model.Action$SubFlowAction",
      "uid" : "vWD538GBmnZO",
      "name" : "bottleneck",
      "tryErrorble" : false,
      "enable" : true,
      "devBoxVars" : { },
      "devFlowVars" : { },
      "minLogLv" : "NONE",
      "flowUid" : "SSPBbWtmfHPV",
      "asynced" : false,
      "inputData" : [ {
        "key" : "__ALL__",
        "val" : "${~__ALL__}"
      } ],
      "outputReflects" : [ {
        "srcKey" : "__pk_result",
        "toKey" : {
          "lv" : "not_specify",
          "key" : "call_resp"
        }
      } ]
    } ],
    "links" : [ ],
    "vars" : { },
    "taskSort" : [ "vWD538GBmnZO" ],
    "whileJudgment" : null,
    "transition" : {
      "toBox" : "",
      "endTag" : "${symbol} ordered:${call_resp.ordered} ${call_resp.breakName}",
      "failEnd" : false,
      "endResultKeys" : [ {
        "lv" : "run_flow",
        "key" : "nearPeakExtreme"
      } ],
      "resultCode" : ""
    },
    "minLogLv" : "DEBUG"
  }, {
    "clazz" : "net.bzk.flow.model.Box",
    "uid" : "UQC5RZ3iJLB7",
    "name" : "Box",
    "actions" : [ {
      "clazz" : "net.bzk.flow.model.Action$SubFlowAction",
      "uid" : "xHaqpw4loFKq",
      "name" : "FetchALL",
      "tryErrorble" : false,
      "enable" : true,
      "devBoxVars" : { },
      "devFlowVars" : { },
      "minLogLv" : "NONE",
      "flowUid" : "lReXow3492HG",
      "asynced" : false,
      "inputData" : [ {
        "key" : "querys",
        "val" : "!javascript===\nlet qs = [];\nlet h24q = `\nfrom(bucket: \"quote\")\n  |> range(start: -1d)\n   |> filter(fn: (r) =>\n    r._measurement == \"realtime\" and\n    r.symbol == \"${symbol}\" and\n    r._field == \"price\"\n  )\n`;\nlet d7q = `\nfrom(bucket: \"quote\")\n  |> range(start: -7d,stop : -1d)\n   |> filter(fn: (r) =>\n    r._measurement == \"realtime\" and\n    r.symbol == \"${symbol}\" and\n    r._field == \"price\"\n  )\n  |> window(every: 3h)\n  |> mean()   \n  |> duplicate(column: \"_stop\", as: \"_time\")\n  |> window(every: inf)\n`;\nlet y2q = `\nimport \"date\"\nfrom(bucket: \"quote\")\n  |> range(start: -2y, stop:-7d)\n  |> filter(fn: (r) =>\n    r._measurement == \"daily\" and\n    r.symbol == \"${symbol}\"\n  )\n |> map(fn: (r) => ({ r with _time: date.truncate(t: r._time, unit: 1d)    }))\n |> pivot(rowKey:[\"_time\"], columnKey: [\"valmean\"], valueColumn: \"_value\")\n |> map(fn: (r) => ({ r with _value: (r.close + r.open + r.low + r.high)/4.00 })) \n`;\n\nqs.push(h24q);\nqs.push(d7q);\nqs.push(y2q);\nqs;\n\n"
      } ],
      "outputReflects" : [ {
        "srcKey" : "allVals",
        "toKey" : {
          "lv" : "not_specify",
          "key" : "y2Vals"
        }
      }, {
        "srcKey" : "vals_1",
        "toKey" : {
          "lv" : "not_specify",
          "key" : "h24Vals"
        }
      } ]
    }, {
      "clazz" : "net.bzk.flow.model.Action$VarModifyAction",
      "uid" : "Dfq0TAINMBq2",
      "name" : "analyzeVars",
      "tryErrorble" : false,
      "enable" : true,
      "devBoxVars" : { },
      "devFlowVars" : { },
      "minLogLv" : "NONE",
      "flatData" : [ {
        "key" : "~peaks",
        "val" : "!javascript===\nconst peakMaxWaitSeconds = 60*60*4;\nconst dto = {\n    peakMaxWaitSeconds:peakMaxWaitSeconds,\n    dimension:'MICRO'\n};\nconst mm = $tsFunc.findPeak(${y2Vals},dto);\nmm;"
      }, {
        "key" : "~nearPeakExtreme",
        "val" : "!javascript===\nconst peakType = $bzk.g('$peaks.trendInfo.nearPeakType');\nconst peakQueryPath = '$peaks.trendInfo.'+ (peakType=='MAXED' ? 'nearMax' : 'nearMin' ) +'.key'\nconst nearPeakKey = $bzk.g(peakQueryPath);\n\nconst dto = {\n    targetKey:nearPeakKey,\n    bigger:peakType == 'MAXED' ? true : false\n};\nconst mm = $tsFunc.findBigger(${y2Vals},JSON.stringify(dto));\nmm;"
      }, {
        "key" : "~peaks40m",
        "val" : "!javascript===\nconst peakMaxWaitSeconds = 60*40;\nconst dto = {\n    peakMaxWaitSeconds:peakMaxWaitSeconds,\n    dimension:'MICRO'\n};\nconst mm = $tsFunc.findPeak(${h24Vals},dto);\nmm;"
      } ]
    }, {
      "clazz" : "net.bzk.flow.model.HttpAction",
      "uid" : "bdp2D8EmHQHn",
      "name" : "BinanceQuote",
      "tryErrorble" : false,
      "enable" : true,
      "devBoxVars" : { },
      "devFlowVars" : { },
      "minLogLv" : "NONE",
      "url" : "${binance.proxyHost}proxy",
      "uriVariables" : { },
      "body" : "{\n    \"name\":\"get_recent_trades_list\",\n    \"apiKey\":\"${binance.key}\",\n    \"secret\":\"${binance.secret}\",\n    \"symbol\":\"${symbol}\",\n    \"limit\":50,\n    \"timeMaped\":true\n}",
      "method" : "POST",
      "headers" : { },
      "headersFlat" : "",
      "key" : {
        "lv" : "run_flow",
        "key" : "binanceQuote"
      }
    }, {
      "clazz" : "net.bzk.flow.model.Action$VarModifyAction",
      "uid" : "VwJUU1q94IA2",
      "name" : "analyzeVars-2",
      "tryErrorble" : false,
      "enable" : true,
      "devBoxVars" : { },
      "devFlowVars" : { },
      "minLogLv" : "NONE",
      "flatData" : [ {
        "key" : "~extremeList",
        "val" : "!javascript===\nconst trendInfo = ${peaks.trendInfo};\nconst state = trendInfo.state;\nconst ans = $tsFunc.listBigger(${y2Vals},isBigger(),JSON.stringify(getPeakList()));\n\nfunction getPeakList(){\n    return state == 'RISE' ? trendInfo.minList : trendInfo.maxList;\n}\n\n\nfunction isBigger(){\n    return state == 'RISE' ? false : true;\n}\n\nans;\n"
      } ]
    } ],
    "links" : [ ],
    "vars" : { },
    "taskSort" : [ "xHaqpw4loFKq", "Dfq0TAINMBq2", "VwJUU1q94IA2", "bdp2D8EmHQHn" ],
    "whileJudgment" : null,
    "transition" : {
      "toBox" : "hLZ3d8T7Vkot",
      "endTag" : null,
      "failEnd" : false,
      "endResultKeys" : [ ],
      "resultCode" : ""
    },
    "minLogLv" : "DEBUG"
  } ],
  "varCfgNames" : [ "binance.json" ],
  "vars" : {
    "symbol" : "BTC"
  },
  "entry" : {
    "clazz" : "net.bzk.flow.model.Entry$PluginEntry",
    "boxUid" : "UQC5RZ3iJLB7",
    "autoRegister" : false,
    "requiredKeys" : [ "symbol" ],
    "outputKeys" : [ ]
  },
  "threadCfg" : {
    "corePoolSize" : 10,
    "maximumPoolSize" : 50,
    "keepAliveTime" : 500,
    "aliveUnit" : "MINUTES"
  },
  "version" : 50
}
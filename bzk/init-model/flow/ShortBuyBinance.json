{
  "clazz" : "net.bzk.flow.model.Flow",
  "uid" : "hMVIvtI9umAB",
  "name" : "ShortBuyBinance",
  "boxs" : [ {
    "clazz" : "net.bzk.flow.model.Box",
    "uid" : "8CVBFRAIwESi",
    "name" : "OrderBuy",
    "actions" : [ {
      "clazz" : "net.bzk.flow.model.Action$SubFlowAction",
      "uid" : "MNAAARnHaCb3",
      "name" : "OrderPost",
      "tryErrorble" : false,
      "devBoxVars" : { },
      "devFlowVars" : { },
      "flowUid" : "02eQyaMwyojZ",
      "asynced" : false,
      "inputData" : [ {
        "key" : "investedRate",
        "val" : "0.01"
      }, {
        "key" : "guardRange",
        "val" : "0.00588"
      }, {
        "key" : "symbol",
        "val" : "${symbol}"
      }, {
        "key" : "selled",
        "val" : "false"
      }, {
        "key" : "currentMove",
        "val" : "0.000168"
      }, {
        "key" : "tags",
        "val" : "[\"shortTermBuy\"]"
      }, {
        "key" : "triggerAmt",
        "val" : "!javascript===\nconst m = ${priceBais.val} * -5;\nconst ans=${amt.val}*6*(1+m)*1.1;\nans;"
      } ],
      "outputReflects" : [ ]
    }, {
      "clazz" : "net.bzk.flow.model.Action$SubFlowAction",
      "uid" : "6JNwUdoujkcj",
      "name" : "GetBinance1MinAmt",
      "tryErrorble" : false,
      "devBoxVars" : { },
      "devFlowVars" : { },
      "flowUid" : "9RLQvpmbGa35",
      "asynced" : false,
      "inputData" : [ {
        "key" : "tsdbQuery",
        "val" : "import \"date\"\r\nt1 = from(bucket: \"quote\")\r\n  |> range(start: -8h)\r\n  |> filter(fn: (r) =>\r\n    r._measurement == \"realtime\" and\r\n    r.symbol == \"${symbol}\" and\r\n    r.trade == \"60s\" and\r\n    r._field == \"totalAmount\"\r\n  )\r\n  |> map(fn: (r) => ({ r with _time: date.truncate(t: r._time, unit: 10s)    }))\r\n  |> pivot(rowKey:[\"_time\"], columnKey: [\"side\"], valueColumn: \"_value\")\r\n  |> map(fn: (r) => ({ r with _value: r.sell + r.buy }))    \r\n  |> movingAverage(n: 10 )\r\nt1   "
      }, {
        "key" : "vaildMins",
        "val" : "31"
      } ],
      "outputReflects" : [ {
        "srcKey" : "nearVal",
        "toKey" : {
          "lv" : "not_specify",
          "key" : "amt"
        }
      } ]
    } ],
    "links" : [ ],
    "vars" : { },
    "taskSort" : [ "6JNwUdoujkcj", "MNAAARnHaCb3" ],
    "whileJudgment" : null,
    "transition" : {
      "toBox" : "",
      "endTag" : "END",
      "failEnd" : false,
      "endResultKeys" : [ ]
    }
  }, {
    "clazz" : "net.bzk.flow.model.Box",
    "uid" : "m7IzQZV5oOJ5",
    "name" : "6hMinCheck",
    "actions" : [ {
      "clazz" : "net.bzk.flow.model.Action$SubFlowAction",
      "uid" : "K3NAnx4H5Fdu",
      "name" : "Get6hMinAvg",
      "tryErrorble" : false,
      "devBoxVars" : { },
      "devFlowVars" : { },
      "flowUid" : "9RLQvpmbGa35",
      "asynced" : false,
      "inputData" : [ {
        "key" : "tsdbQuery",
        "val" : "t1 = from(bucket: \"quote\")\n  |> range(start: -12h)\n  |> filter(fn: (r) =>\n    r._measurement == \"realtime\" and\n    r._field == \"price\" and\n    r.symbol == \"${symbol}\" \n  )\n  |> map(fn: (r) => ({ r with cp: r._value   }))\n  |>movingAverage(n: 36)\n  |> map(fn: (r) => ({ r with _value: (r.cp-r._value)/r._value   }))\n  |> map(fn: (r) => ({ r with _value:if r._value >0.00 then 0.00 else r._value   }))\n  |> window(every: 3h)\n  |> min()   \n  |> window(every: inf)\n  |>movingAverage(n: 6)\n\nt1"
      }, {
        "key" : "vaildMins",
        "val" : "!javascript===\n(6*60)+5"
      } ],
      "outputReflects" : [ {
        "srcKey" : "nearVal",
        "toKey" : {
          "lv" : "not_specify",
          "key" : "thline"
        }
      } ]
    } ],
    "links" : [ {
      "clazz" : "net.bzk.flow.model.Link",
      "uid" : "YL0vuWiE5hZt",
      "name" : "6hMinTest",
      "condition" : {
        "clazz" : "net.bzk.flow.model.Condition$ConditionNum",
        "kind" : "NONE",
        "next" : null,
        "left" : "${priceBais.val}",
        "right" : "!javascript===\n${thline.val}*1.0668;",
        "type" : "greater_equal"
      },
      "transition" : {
        "toBox" : "",
        "endTag" : "6hMinNotPass",
        "failEnd" : false,
        "endResultKeys" : [ ]
      }
    } ],
    "vars" : { },
    "taskSort" : [ "K3NAnx4H5Fdu", "YL0vuWiE5hZt" ],
    "whileJudgment" : null,
    "transition" : {
      "toBox" : "8CVBFRAIwESi",
      "endTag" : null,
      "failEnd" : false,
      "endResultKeys" : [ ]
    }
  }, {
    "clazz" : "net.bzk.flow.model.Box",
    "uid" : "1HMjdDMRjAJ0",
    "name" : "1HPriceBais",
    "actions" : [ {
      "clazz" : "net.bzk.flow.model.HttpAction",
      "uid" : "OcPQy555y0Gn",
      "name" : "cancel_by_filter",
      "tryErrorble" : false,
      "devBoxVars" : { },
      "devFlowVars" : { },
      "url" : "${binance.proxyHost}proxy",
      "uriVariables" : { },
      "body" : "!javascript===\r\nconst payload= {\r\n  \"name\": \"cancel_by_filter\",\r\n  \"apiKey\": \"${binance.key}\",\r\n  \"secret\": \"${binance.secret}\",\r\n  \"symbol\": \"${symbol}\"\r\n};\r\n\r\nconst pinfolist = ${posInfo};\r\nconst amt = pinfolist[0].positionAmt;\r\nif(amt>0){\r\n    payload['notOrderType']='STOP_MARKET';\r\n}\r\n\r\npayload;",
      "method" : "POST",
      "headers" : { },
      "headersFlat" : "",
      "key" : {
        "lv" : "not_specify",
        "key" : "postResult"
      }
    }, {
      "clazz" : "net.bzk.flow.model.Action$SubFlowAction",
      "uid" : "SiPyHUcTzl1K",
      "name" : "Get3HPriceBais",
      "tryErrorble" : false,
      "devBoxVars" : { },
      "devFlowVars" : { },
      "flowUid" : "9RLQvpmbGa35",
      "asynced" : false,
      "inputData" : [ {
        "key" : "tsdbQuery",
        "val" : "t1 = from(bucket: \"quote\")\r\n  |> range(start: -60h)\r\n  |> filter(fn: (r) =>\r\n    r._measurement == \"realtime\" and\r\n    r._field == \"price\" and\r\n    r.symbol == \"${symbol}\" \r\n  )\r\n  |> map(fn: (r) => ({ r with cp: r._value   }))\r\n  |>movingAverage(n: 36)\r\n  |> map(fn: (r) => ({ r with _value: (r.cp-r._value)/r._value   }))\r\n\r\nt1"
      }, {
        "key" : "vaildMins",
        "val" : "25"
      } ],
      "outputReflects" : [ {
        "srcKey" : "nearVal",
        "toKey" : {
          "lv" : "run_flow",
          "key" : "priceBais"
        }
      } ]
    }, {
      "clazz" : "net.bzk.flow.model.HttpAction",
      "uid" : "3upPLAHw95l6",
      "name" : "GetPostionInfo",
      "tryErrorble" : false,
      "devBoxVars" : { },
      "devFlowVars" : { },
      "url" : "${binance.proxyHost}proxy",
      "uriVariables" : { },
      "body" : "{\r\n    \"name\":\"get_position\",\r\n    \"apiKey\": \"${binance.key}\",\r\n    \"secret\": \"${binance.secret}\",\r\n    \"symbol\": \"${symbol}\",\r\n    \"positionSide\":\"LONG\"\r\n}",
      "method" : "POST",
      "headers" : { },
      "headersFlat" : "",
      "key" : {
        "lv" : "not_specify",
        "key" : "posInfo"
      }
    } ],
    "links" : [ {
      "clazz" : "net.bzk.flow.model.Link",
      "uid" : "LpO1DEwUtkpW",
      "name" : "Check1HPriceBais",
      "condition" : {
        "clazz" : "net.bzk.flow.model.Condition$ConditionNum",
        "kind" : "NONE",
        "next" : null,
        "left" : "${priceBais.val}",
        "right" : "-0.000268",
        "type" : "greater_equal"
      },
      "transition" : {
        "toBox" : "",
        "endTag" : "PriceBaisToSmail",
        "failEnd" : false,
        "endResultKeys" : [ ]
      }
    }, {
      "clazz" : "net.bzk.flow.model.Link",
      "uid" : "scCTwzCl5w9O",
      "name" : "ToBig",
      "condition" : {
        "clazz" : "net.bzk.flow.model.Condition$ConditionNum",
        "kind" : "NONE",
        "next" : null,
        "left" : "${priceBais.val}",
        "right" : "-0.0686",
        "type" : "lessthan_equal"
      },
      "transition" : {
        "toBox" : "",
        "endTag" : "ToBig",
        "failEnd" : false,
        "endResultKeys" : [ ]
      }
    } ],
    "vars" : { },
    "taskSort" : [ "3upPLAHw95l6", "OcPQy555y0Gn", "SiPyHUcTzl1K", "LpO1DEwUtkpW", "scCTwzCl5w9O" ],
    "whileJudgment" : null,
    "transition" : {
      "toBox" : "m7IzQZV5oOJ5",
      "endTag" : null,
      "failEnd" : false,
      "endResultKeys" : [ {
        "lv" : "not_specify",
        "key" : "priceBais"
      } ]
    }
  } ],
  "varCfgNames" : [ "binance.json" ],
  "vars" : {
    "symbol" : "BTC"
  },
  "entry" : {
    "clazz" : "net.bzk.flow.model.Entry$PluginEntry",
    "boxUid" : "1HMjdDMRjAJ0",
    "autoRegister" : false,
    "requiredKeys" : [ "symbol" ],
    "outputKeys" : [ ]
  },
  "logEncryptKey" : "1234567890123456",
  "threadCfg" : {
    "corePoolSize" : 10,
    "maximumPoolSize" : 50,
    "keepAliveTime" : 500,
    "aliveUnit" : "MINUTES"
  }
}
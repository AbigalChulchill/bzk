{
  "clazz" : "net.bzk.flow.model.Flow",
  "uid" : "6MRqvrebound",
  "name" : "SUB-strategy-dif-rebound",
  "boxs" : [ {
    "clazz" : "net.bzk.flow.model.Box",
    "uid" : "KoOwMvZDE63r",
    "name" : "Box",
    "actions" : [ {
      "clazz" : "net.bzk.flow.model.Action$PolyglotAction",
      "uid" : "Qvqn3l33fFem",
      "name" : "InitVars",
      "tryErrorble" : false,
      "enable" : "true",
      "devBoxVars" : { },
      "devFlowVars" : { },
      "minLogLv" : "NONE",
      "code" : "const lastDifMap = ${lastDifMap};\r\nconst dif = ${cs.dif};\r\n\r\n\r\nfunction getNewerInfo(posSide){\r\n    const difOrderInfo = lastDifMap['DifTrace_'+posSide];\r\n    const traceOrderInfo = lastDifMap['DifTraced_'+posSide];\r\n    if(traceOrderInfo==null && difOrderInfo==null) return null;\r\n    if(traceOrderInfo==null) return difOrderInfo;\r\n    if(difOrderInfo==null) return traceOrderInfo;\r\n    return Date(difOrderInfo.orderPack.created_at) > Date(traceOrderInfo.orderPack.created_at) ? difOrderInfo : traceOrderInfo;\r\n}\r\n\r\nfunction getPositionSide(){\r\n    const longOrderInfo = getNewerInfo('LONG');\r\n    const shortOrderInfo = getNewerInfo('SHORT');\r\n    if (longOrderInfo==null && shortOrderInfo==null) return 'NO_ORDER';\r\n    if(longOrderInfo!=null) return 'SHORT';\r\n    if(shortOrderInfo!=null) return 'LONG';\r\n    const longDate = new Date(longOrderInfo.orderPack.created_at);\r\n    const shortDate = new Date(shortOrderInfo.orderPack.created_at);\r\n    return longDate>shortDate ? 'SHORT':'LONG';\r\n    \r\n}\r\n\r\n\r\nconst positionSide = getPositionSide();\r\nconst lastOrderPositionSide = positionSide == 'LONG' ? 'SHORT' : 'LONG';\r\n\r\n$bzk.putObj('positionSide',positionSide);\r\n\r\nfunction getLastInfo(){\r\n    return getNewerInfo(lastOrderPositionSide);\r\n}\r\n\r\nconst lastInfo = getLastInfo();\r\n\r\n$bzk.put('lastInfo',JSON.stringify(lastInfo));\r\n\r\n\r\nfunction genOrderObjJson(){\r\n\r\n    return JSON.stringify({\r\n        \"targetPrice\":-1,\r\n        \"stopPrice\": -1,\r\n        // \"gapRate\":0.003,\r\n        \"attachName\":'DifRebound'\r\n    });\r\n}\r\n$bzk.put('~orderLimitBody',genOrderObjJson());\r\n\r\nfunction getOrderPeakAt(){\r\n    if(lastInfo==null)return '2999-01-24T00:35:05.160756+00:00';\r\n    if(lastInfo.orderPack.attach.nearPeak==null)return '2899-01-24T00:35:05.160756+00:00';\r\n    const lastPeakAt = lastInfo.orderPack.attach.nearPeak.key;\r\n    return lastPeakAt;\r\n}\r\nconst orderPeakTime = getOrderPeakAt();\r\n$bzk.put('orderPeakTime',orderPeakTime);\r\n\r\n\r\nconst difList = $tsFunc.toPoints(dif);\r\nconst tarList = $tsFunc.slicePoints(difList,orderPeakTime);\r\n\r\n$bzk.putObj('lastPeakUntilNowList',tarList);\r\n\r\n\r\n\r\ntrue;",
      "polyglot" : "js",
      "resultLv" : "not_specify",
      "resultKey" : "InitVars"
    }, {
      "clazz" : "net.bzk.flow.model.Action$SubFlowAction",
      "uid" : "yBV3YHFsHfCI",
      "name" : "__Order",
      "tryErrorble" : false,
      "enable" : "true",
      "devBoxVars" : { },
      "devFlowVars" : { },
      "minLogLv" : "NONE",
      "flowUid" : "substoplimit",
      "asynced" : false,
      "inputData" : [ {
        "key" : "positionSide",
        "val" : "${positionSide}"
      }, {
        "key" : "position",
        "val" : "${position}"
      }, {
        "key" : "symbol",
        "val" : "${symbol}"
      }, {
        "key" : "orderLimitBody",
        "val" : "${orderLimitBody}"
      }, {
        "key" : "runStoped",
        "val" : "false"
      }, {
        "key" : "trigger",
        "val" : "dif-rebound"
      } ],
      "outputReflects" : [ {
        "srcKey" : "__pk_result",
        "toKey" : {
          "lv" : "not_specify",
          "key" : "stopLimitResult"
        }
      } ]
    } ],
    "links" : [ {
      "clazz" : "net.bzk.flow.model.Link",
      "uid" : "PrtQc5mK5fOc",
      "name" : "IsOPackPeak",
      "condition" : {
        "clazz" : "net.bzk.flow.model.Condition$ConditionCode",
        "kind" : "NONE",
        "next" : null,
        "polyglot" : "js",
        "code" : "const positionSide = '${positionSide}';\r\nconst difPeaks = ${cs.mdifPeak.trendInfo.peaks};\r\nconst orderPeakTime = '${orderPeakTime}';\r\n\r\nfunction checkOK(){\r\n    if(difPeaks.length<2) return false;\r\n    if(difPeaks[1].key != orderPeakTime) return false;\r\n    return difPeaks[0].idx == 1;\r\n}\r\n\r\n!checkOK();\r\n"
      },
      "transition" : {
        "toBox" : "",
        "endTag" : "${symbol} ${positionSide} IsOPackPeak",
        "failEnd" : false,
        "endResultKeys" : [ ],
        "resultCode" : "{\n  \"ordered\": false,\n  \"breakName\": \"IsOPackPeak\"\n}"
      },
      "enable" : true
    }, {
      "clazz" : "net.bzk.flow.model.Link",
      "uid" : "frq4EfAYEZ1D",
      "name" : "OverTime",
      "condition" : {
        "clazz" : "net.bzk.flow.model.Condition$ConditionNum",
        "kind" : "NONE",
        "next" : null,
        "left" : "${cs.difPeak.trendInfo.nearPeak.dtime}",
        "right" : "!javascript===\n60*5*1*1.3;",
        "type" : "greater"
      },
      "transition" : {
        "toBox" : "",
        "endTag" : "${symbol} ${positionSide} OverTime",
        "failEnd" : false,
        "endResultKeys" : [ ],
        "resultCode" : "{\n  \"ordered\": false,\n  \"breakName\": \"OverTime\"\n}"
      },
      "enable" : true
    }, {
      "clazz" : "net.bzk.flow.model.Link",
      "uid" : "DKTiAduexdfC",
      "name" : "CPosSide",
      "condition" : {
        "clazz" : "net.bzk.flow.model.Condition$ConditionCode",
        "kind" : "NONE",
        "next" : null,
        "polyglot" : "js",
        "code" : "const posSides = ['LONG', 'SHORT'];\nconst positionSide = '${positionSide}';\n!posSides.includes(positionSide);\n"
      },
      "transition" : {
        "toBox" : "",
        "endTag" : "${symbol} ${positionSide} CPosSide",
        "failEnd" : false,
        "endResultKeys" : [ ],
        "resultCode" : "{\n  \"ordered\": false,\n  \"breakName\": \"CPosSide\"\n}"
      },
      "enable" : true
    }, {
      "clazz" : "net.bzk.flow.model.Link",
      "uid" : "7PiHr8YAHjaz",
      "name" : "CState",
      "condition" : {
        "clazz" : "net.bzk.flow.model.Condition$ConditionCode",
        "kind" : "NONE",
        "next" : null,
        "polyglot" : "js",
        "code" : "const positionSide = '${positionSide}';\r\nconst state = '${cs.difPeak.trendInfo.state}'\r\n\r\nfunction check(){\r\n    if(positionSide=='LONG') return state == 'RISE';\r\n    if(positionSide=='SHORT') return state == 'FALL';\r\n    return false;\r\n}\r\n\r\n!check();"
      },
      "transition" : {
        "toBox" : "",
        "endTag" : "${symbol} ${positionSide} IsOPackPeak",
        "failEnd" : false,
        "endResultKeys" : [ ],
        "resultCode" : "{\n  \"ordered\": false,\n  \"breakName\": \"CState\"\n}"
      },
      "enable" : true
    } ],
    "vars" : { },
    "taskSort" : [ "Qvqn3l33fFem", "DKTiAduexdfC", "frq4EfAYEZ1D", "PrtQc5mK5fOc", "7PiHr8YAHjaz", "yBV3YHFsHfCI" ],
    "whileJudgment" : null,
    "transition" : {
      "toBox" : "",
      "endTag" : "${symbol} ${positionSide} Ordered",
      "failEnd" : false,
      "endResultKeys" : [ ],
      "resultCode" : "{\n  \"ordered\": true,\n  \"breakName\": \"NONE\"\n}"
    },
    "minLogLv" : "DEBUG"
  } ],
  "varCfgNames" : [ "fin-exchange-manage.json" ],
  "vars" : {
    "symbol" : "ETH"
  },
  "entry" : {
    "clazz" : "net.bzk.flow.model.Entry$PluginEntry",
    "boxUid" : "KoOwMvZDE63r",
    "autoRegister" : false,
    "requiredKeys" : [ "__ALL__" ],
    "outputKeys" : [ "__pk_result" ]
  },
  "threadCfg" : {
    "corePoolSize" : 10,
    "maximumPoolSize" : 50,
    "keepAliveTime" : 500,
    "aliveUnit" : "MINUTES"
  },
  "version" : 41
}
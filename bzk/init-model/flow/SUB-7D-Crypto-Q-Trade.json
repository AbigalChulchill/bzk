{
  "clazz" : "net.bzk.flow.model.Flow",
  "uid" : "LlXZCvcaZsK8",
  "name" : "SUB-7D-Crypto-Q-Trade",
  "boxs" : [ {
    "clazz" : "net.bzk.flow.model.Box",
    "uid" : "Hoh5CNTFiFDi",
    "name" : "SELL",
    "actions" : [ {
      "clazz" : "net.bzk.flow.model.Action$SubFlowAction",
      "uid" : "gsxIHdLoOV2I",
      "name" : "SellOrder",
      "tryErrorble" : false,
      "devBoxVars" : { },
      "devFlowVars" : { },
      "flowUid" : "kCmTvvaxfIBr",
      "asynced" : false,
      "inputData" : [ {
        "key" : "symbol",
        "val" : "${symbol}"
      }, {
        "key" : "side",
        "val" : "SELL"
      }, {
        "key" : "guardRate",
        "val" : "0.03"
      }, {
        "key" : "investedRate",
        "val" : "0.12"
      }, {
        "key" : "thth",
        "val" : "0.003"
      } ],
      "outputReflects" : [ ]
    } ],
    "links" : [ ],
    "vars" : { },
    "taskSort" : [ "gsxIHdLoOV2I" ],
    "whileJudgment" : null,
    "transition" : {
      "toBox" : "",
      "endTag" : "O SELL ${symbol}  ${acceleration.val}_${direction.last.val}_${direction.macro.state}",
      "failEnd" : false,
      "endResultKeys" : [ ]
    }
  }, {
    "clazz" : "net.bzk.flow.model.Box",
    "uid" : "vKSau3Y0hT1i",
    "name" : "Box",
    "actions" : [ {
      "clazz" : "net.bzk.flow.model.Action$SubFlowAction",
      "uid" : "KpH4PimCRDSe",
      "name" : "velocity_th",
      "tryErrorble" : false,
      "devBoxVars" : { },
      "devFlowVars" : { },
      "flowUid" : "9RLQvpmbGa35",
      "asynced" : false,
      "inputData" : [ {
        "key" : "tsdbQuery",
        "val" : "import \"math\"\r\nfrom(bucket: \"quote\")\r\n  |> range(start: -52h)\r\n  |> filter(fn: (r) =>\r\n    r._measurement == \"realtime\" and\r\n    r.symbol == \"${symbol}\" and\r\n    r._field == \"price\"\r\n  )\r\n  |> difference()\r\n  |> movingAverage(n: 144  )\r\n  |> movingAverage(n: 12  )\r\n  |>map(fn: (r) => ({ r with _value : math.abs(x: r._value) }))   \r\n  |> movingAverage(n: 432 )"
      }, {
        "key" : "vaildMins",
        "val" : "10"
      }, {
        "key" : "skipCount",
        "val" : "0"
      } ],
      "outputReflects" : [ {
        "srcKey" : "nearVal",
        "toKey" : {
          "lv" : "run_flow",
          "key" : "velocityTH"
        }
      } ]
    }, {
      "clazz" : "net.bzk.flow.model.Action$SubFlowAction",
      "uid" : "tDr8UTOVkNiO",
      "name" : "RF_V",
      "tryErrorble" : false,
      "devBoxVars" : { },
      "devFlowVars" : { },
      "flowUid" : "PeakFinder5",
      "asynced" : false,
      "inputData" : [ {
        "key" : "tsdbQuery",
        "val" : "  from(bucket: \"quote\")\n  |> range(start: -5d)\n  |> filter(fn: (r) =>\n    r._measurement == \"realtime\" and\n    r.symbol == \"${symbol}\" and\n    r._field == \"price\"\n  )\n  |> difference()\n  |> movingAverage(n: ${peakPeriodNum}  )\n  |> movingAverage(n: 12  )\n\n"
      }, {
        "key" : "peakMaxWaitSeconds",
        "val" : "3600"
      }, {
        "key" : "symbol",
        "val" : "${symbol}"
      }, {
        "key" : "macroAmplitudeRate",
        "val" : "0.368"
      } ],
      "outputReflects" : [ {
        "srcKey" : "ans",
        "toKey" : {
          "lv" : "run_flow",
          "key" : "direction"
        }
      } ]
    }, {
      "clazz" : "net.bzk.flow.model.Action$VarModifyAction",
      "uid" : "LtgQk1mGlHfR",
      "name" : "GenTarget",
      "tryErrorble" : false,
      "devBoxVars" : { },
      "devFlowVars" : { },
      "flatData" : [ {
        "key" : "~velocityThWeight",
        "val" : "!javascript===\nconst vb = ${volumeBias.val};\nconst curTH = ${direction.macro};\nconst r = Math.pow(2,vb);\nconst vTH = ${velocityTH.val} * r ;\n\n\nfunction calc(){\n    return {\n        \"SELL\": formula('SELL','nearMin'),\n        \"BUY\": formula('BUY','nearMax'),\n    };\n}\n\nfunction formula(side,vkey){\n    let n = curTH[vkey];\n    if(!n){\n        return side == 'BUY' ? -vTH : vTH;\n    }\n    let v =  n.val;\n    return -1 * (v /2) * r;\n}\n\ncalc();"
      }, {
        "key" : "~rapidReboundRate",
        "val" : "!javascript===\n\nconst th = ${velocityTH.val};\nconst a = ${acceleration.val};\nconst ans = a/th;\nans;"
      } ]
    }, {
      "clazz" : "net.bzk.flow.model.Action$SubFlowAction",
      "uid" : "brDCdhwwdBqn",
      "name" : "Acceleration",
      "tryErrorble" : false,
      "devBoxVars" : { },
      "devFlowVars" : { },
      "flowUid" : "9RLQvpmbGa35",
      "asynced" : false,
      "inputData" : [ {
        "key" : "tsdbQuery",
        "val" : "import \"strings\"\r\n\r\ntimedMovingSum = (every, period, column=\"_value\", tables=<-) =>\r\n  tables\r\n    |> window(every: every, period: period)\r\n    |> sum(column:column)\r\n    |> duplicate(column: \"_stop\", as: \"_time\")\r\n    |> window(every: inf)\r\n\r\nfrom(bucket: \"quote\")\r\n  |> range(start: -20h)\r\n  |> filter(fn: (r) =>\r\n    r._measurement == \"realtime\" and\r\n    r.symbol == \"${symbol}\" and\r\n    r._field == \"price\"\r\n  )\r\n  |> difference()\r\n  |> difference()\r\n  |>timedMovingSum(every: 5m, period: 1h)\r\n  |> movingAverage(n: 144  )"
      }, {
        "key" : "vaildMins",
        "val" : "10"
      }, {
        "key" : "skipCount",
        "val" : "1"
      } ],
      "outputReflects" : [ {
        "srcKey" : "nearVal",
        "toKey" : {
          "lv" : "run_flow",
          "key" : "acceleration"
        }
      } ]
    }, {
      "clazz" : "net.bzk.flow.model.Action$SubFlowAction",
      "uid" : "toNo8ZA1DBhY",
      "name" : "VolumeBias",
      "tryErrorble" : false,
      "devBoxVars" : { },
      "devFlowVars" : { },
      "flowUid" : "9RLQvpmbGa35",
      "asynced" : false,
      "inputData" : [ {
        "key" : "tsdbQuery",
        "val" : "import \"date\"\r\nimport \"math\"\r\n\r\navg12h = from(bucket: \"quote\")\r\n  |> range(start: -7d)\r\n  |> filter(fn: (r) =>\r\n    r._measurement == \"realtime\" and\r\n    r.symbol == \"${symbol}\" and\r\n    (r._field == \"volume_24h\" or r._field == \"price\")\r\n  )\r\n  |> map(fn: (r) => ({ r with _time: date.truncate(t: r._time, unit: 5m)    }))\r\n  |> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\r\n  |> map(fn: (r) => ({ r with _value: r.volume_24h / r.price }))    \r\n  |> difference()\r\n  |>map(fn: (r) => ({ r with _value: math.abs(x: r._value)  }))   \r\n  |> mean()\r\n  |> findColumn(\r\n    fn: (key) => true,\r\n    column: \"_value\"\r\n  )  \r\n\r\n\r\nfrom(bucket: \"quote\")\r\n  |> range(start: -3h)\r\n  |> filter(fn: (r) =>\r\n    r._measurement == \"realtime\" and\r\n    r.symbol == \"${symbol}\" and\r\n    (r._field == \"volume_24h\" or r._field == \"price\")\r\n  )\r\n  |> map(fn: (r) => ({ r with _time: date.truncate(t: r._time, unit: 5m)    }))\r\n  |> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\r\n  |> map(fn: (r) => ({ r with _value: r.volume_24h / r.price }))    \r\n  |> difference()\r\n  |> movingAverage(n: 24  )\r\n  |>map(fn: (r) => ({ r with _value: (r._value / avg12h[0])   }))   \r\n "
      }, {
        "key" : "vaildMins",
        "val" : "10"
      }, {
        "key" : "skipCount",
        "val" : "0"
      } ],
      "outputReflects" : [ {
        "srcKey" : "nearVal",
        "toKey" : {
          "lv" : "run_flow",
          "key" : "volumeBias"
        }
      } ]
    }, {
      "clazz" : "net.bzk.flow.model.Action$VarModifyAction",
      "uid" : "TA1tlPz4LZ1Z",
      "name" : "FixTarget",
      "tryErrorble" : false,
      "devBoxVars" : { },
      "devFlowVars" : { },
      "flatData" : [ {
        "key" : "~side",
        "val" : "!javascript===\nconst rrr = ${rapidReboundRate};\nconst th = ${velocityThWeight};\nconst lastv =  ${direction.last.val};\nconst macroState = '${direction.macro.state}';\nconst microState = '${direction.micro.state}';\n\nfunction clac(){\n    if(Math.abs( rrr)>=2) return rrr>0 ? 'BUY' : 'SELL';    \n    //if(macroState!=microState) return 'STATE_NOT_EQ';\n    if(macroState == 'FALL'  ){\n        if(lastv > th.SELL){\n             return 'SELL';\n        }\n        return 'SELL_TH_BYE';\n    }\n    if(macroState == 'RISE'  ){\n        if(lastv < th.BUY){\n            return 'BUY';\n        }\n        return 'BUY_TH_BYE';\n    }\n    throw new Error('no support check');\n}\nclac();"
      }, {
        "key" : "overTH",
        "val" : "!javascript===\nconst side = bzk.g('side');\nconst th = ${velocityThWeight};\nfunction calc(){\n    if(side == 'SELL_TH_BYE') return th.SELL;\n    if(side == 'BUY_TH_BYE') return th.BUY;\n    return 'IT PASS';\n}\ncalc();"
      } ]
    } ],
    "links" : [ {
      "clazz" : "net.bzk.flow.model.Link",
      "uid" : "BXX48Illzys2",
      "name" : "SELL_Check",
      "condition" : {
        "clazz" : "net.bzk.flow.model.Condition$ConditionTxt",
        "kind" : "NONE",
        "next" : null,
        "left" : "${side}",
        "right" : "SELL",
        "not" : false,
        "type" : "equal"
      },
      "transition" : {
        "toBox" : "Hoh5CNTFiFDi",
        "endTag" : null,
        "failEnd" : false,
        "endResultKeys" : [ ]
      }
    }, {
      "clazz" : "net.bzk.flow.model.Link",
      "uid" : "tl455y47pObG",
      "name" : "STATE_NOT_EQ",
      "condition" : {
        "clazz" : "net.bzk.flow.model.Condition$ConditionTxt",
        "kind" : "NONE",
        "next" : null,
        "left" : "${side}",
        "right" : "STATE_NOT_EQ",
        "not" : false,
        "type" : "equal"
      },
      "transition" : {
        "toBox" : "",
        "endTag" : "STATE_NOT_EQ ${symbol} :  ${acceleration.val}_${direction.last.val}_${direction.macro.state}",
        "failEnd" : false,
        "endResultKeys" : [ ]
      }
    }, {
      "clazz" : "net.bzk.flow.model.Link",
      "uid" : "HS57eKRpsKot",
      "name" : "BUY_Check",
      "condition" : {
        "clazz" : "net.bzk.flow.model.Condition$ConditionTxt",
        "kind" : "NONE",
        "next" : null,
        "left" : "${side}",
        "right" : "BUY",
        "not" : false,
        "type" : "equal"
      },
      "transition" : {
        "toBox" : "YOqDrvPxxCiK",
        "endTag" : null,
        "failEnd" : false,
        "endResultKeys" : [ ]
      }
    } ],
    "vars" : { },
    "taskSort" : [ "KpH4PimCRDSe", "tDr8UTOVkNiO", "toNo8ZA1DBhY", "brDCdhwwdBqn", "LtgQk1mGlHfR", "TA1tlPz4LZ1Z", "tl455y47pObG", "BXX48Illzys2", "HS57eKRpsKot" ],
    "whileJudgment" : null,
    "transition" : {
      "toBox" : "b6j6H05VX2Wq",
      "endTag" : null,
      "failEnd" : false,
      "endResultKeys" : [ ]
    }
  }, {
    "clazz" : "net.bzk.flow.model.Box",
    "uid" : "b6j6H05VX2Wq",
    "name" : "7D_MINMAX",
    "actions" : [ {
      "clazz" : "net.bzk.flow.model.Action$SubFlowAction",
      "uid" : "zpYbJsMkkB3R",
      "name" : "RF_Bias_FIXED",
      "tryErrorble" : false,
      "devBoxVars" : { },
      "devFlowVars" : { },
      "flowUid" : "PeakFinder5",
      "asynced" : false,
      "inputData" : [ {
        "key" : "tsdbQuery",
        "val" : "import \"strings\"\na=  from(bucket: \"quote\")\n  |> range(start: -5d)\n   |> filter(fn: (r) =>\n    r._measurement == \"realtime\" and\n    r.symbol == \"${symbol}\" and\n    r._field == \"price\"\n  )\n  |>mean()\n  |> findColumn(\n      fn: (key) => key._field == \"price\",\n      column: \"_value\"\n    )\n\nfrom(bucket: \"quote\")\n  |> range(start: -5d)\n   |> filter(fn: (r) =>\n    r._measurement == \"realtime\" and\n    r.symbol == \"${symbol}\" and\n    r._field == \"price\"\n  )\n  |>map(fn: (r) => ({ r with _value: r._value - a[0] }))  "
      }, {
        "key" : "peakMaxWaitSeconds",
        "val" : "3600"
      }, {
        "key" : "symbol",
        "val" : "${symbol}"
      }, {
        "key" : "macroAmplitudeRate",
        "val" : "0.1"
      } ],
      "outputReflects" : [ {
        "srcKey" : "ans",
        "toKey" : {
          "lv" : "not_specify",
          "key" : "RF_Bias_FIXED"
        }
      } ]
    }, {
      "clazz" : "net.bzk.flow.model.Action$VarModifyAction",
      "uid" : "L2HlEddXV6pa",
      "name" : "GenVars",
      "tryErrorble" : false,
      "devBoxVars" : { },
      "devFlowVars" : { },
      "flatData" : [ {
        "key" : "TH",
        "val" : "!javascript===\nconst rf = bzk.g('Bais.${symbol}.RF.D5');\nconst d = rf.macro.state;\nconst macro = rf.macro;\n\nfunction calc(){\n    if(d == 'FALL'){\n        let ans= -macro.nearMin.val / 2;\n        if(ans<0) throw new Error(d+' ans:'+ans);\n        return ans;\n    }\n    if(d== 'RISE'){\n        let ans= -macro.nearMax.val / 2;\n        if(ans>0) throw new Error(d+' ans:'+ans);\n        return ans;\n    }\n    throw new Error('not support='+d);\n}\n\ncalc();\n\n"
      }, {
        "key" : "side7d",
        "val" : "const th = bzk.g('TH');\r\nconst rf = ${RF_Bias_FIXED};\r\nconst d = rf.macro.state;\r\nconst lastv = rf.last.val;\r\nconst dtime = rf.macro.nearPeak.dtime;\r\nfunction calc(){\r\n    if(!checkTime()) return 'OVER_PICK';\r\n    if(d == 'FALL'){\r\n        return lastv > th ? 'SELL':'7D_SELL_TH';\r\n    }\r\n    if(d== 'RISE'){\r\n        return lastv < th ? 'BUY':'7D_BUY_TH';\r\n    }\r\n    throw new Error('not support='+d);\r\n    \r\n}\r\n\r\nfunction checkTime(){\r\n    return dtime < (5 * 60 * 60);\r\n}\r\n\r\ncalc();"
      } ]
    } ],
    "links" : [ {
      "clazz" : "net.bzk.flow.model.Link",
      "uid" : "rcpWKc8OlITQ",
      "name" : "S_Check",
      "condition" : {
        "clazz" : "net.bzk.flow.model.Condition$ConditionTxt",
        "kind" : "NONE",
        "next" : null,
        "left" : "${side7d}",
        "right" : "SELL",
        "not" : false,
        "type" : "equal"
      },
      "transition" : {
        "toBox" : "Hoh5CNTFiFDi",
        "endTag" : null,
        "failEnd" : false,
        "endResultKeys" : [ ]
      }
    }, {
      "clazz" : "net.bzk.flow.model.Link",
      "uid" : "tKVLlIi2OOtc",
      "name" : "B_Check",
      "condition" : {
        "clazz" : "net.bzk.flow.model.Condition$ConditionTxt",
        "kind" : "NONE",
        "next" : null,
        "left" : "${side7d}",
        "right" : "BUY",
        "not" : false,
        "type" : "equal"
      },
      "transition" : {
        "toBox" : "YOqDrvPxxCiK",
        "endTag" : null,
        "failEnd" : false,
        "endResultKeys" : [ ]
      }
    } ],
    "vars" : { },
    "taskSort" : [ "zpYbJsMkkB3R", "L2HlEddXV6pa", "rcpWKc8OlITQ", "tKVLlIi2OOtc" ],
    "whileJudgment" : null,
    "transition" : {
      "toBox" : "",
      "endTag" : "${symbol} side:${side} side7d: ${side7d}",
      "failEnd" : false,
      "endResultKeys" : [ ]
    }
  }, {
    "clazz" : "net.bzk.flow.model.Box",
    "uid" : "YOqDrvPxxCiK",
    "name" : "BUY",
    "actions" : [ {
      "clazz" : "net.bzk.flow.model.Action$SubFlowAction",
      "uid" : "U9DwmbucQ94V",
      "name" : "BuyOrder",
      "tryErrorble" : false,
      "devBoxVars" : { },
      "devFlowVars" : { },
      "flowUid" : "kCmTvvaxfIBr",
      "asynced" : false,
      "inputData" : [ {
        "key" : "symbol",
        "val" : "${symbol}"
      }, {
        "key" : "side",
        "val" : "BUY"
      }, {
        "key" : "guardRate",
        "val" : "0.03"
      }, {
        "key" : "investedRate",
        "val" : "0.12"
      }, {
        "key" : "thth",
        "val" : "0.003"
      } ],
      "outputReflects" : [ ]
    } ],
    "links" : [ ],
    "vars" : { },
    "taskSort" : [ "U9DwmbucQ94V" ],
    "whileJudgment" : null,
    "transition" : {
      "toBox" : "",
      "endTag" : "O BUY ${symbol}  ${acceleration.val}_${direction.last.val}_${direction.macro.state}",
      "failEnd" : false,
      "endResultKeys" : [ ]
    }
  } ],
  "varCfgNames" : [ ],
  "vars" : {
    "symbol" : "BTC",
    "peakPeriodNum" : 144
  },
  "entry" : {
    "clazz" : "net.bzk.flow.model.Entry$PluginEntry",
    "boxUid" : "vKSau3Y0hT1i",
    "autoRegister" : false,
    "requiredKeys" : [ "symbol" ],
    "outputKeys" : [ ]
  },
  "logEncryptKey" : "1234567890123456",
  "threadCfg" : {
    "corePoolSize" : 10,
    "maximumPoolSize" : 50,
    "keepAliveTime" : 500,
    "aliveUnit" : "MINUTES"
  }
}
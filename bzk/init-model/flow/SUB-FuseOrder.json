{
  "clazz" : "net.bzk.flow.model.Flow",
  "uid" : "FwGMPiyJdlPl",
  "name" : "SUB-FuseOrder",
  "boxs" : [ {
    "clazz" : "net.bzk.flow.model.Box",
    "uid" : "a4NkW28jdISd",
    "name" : "Box",
    "actions" : [ {
      "clazz" : "net.bzk.flow.model.Action$PolyglotAction",
      "uid" : "viRNYSWGuVir",
      "name" : "Vars",
      "tryErrorble" : false,
      "enable" : "true",
      "devBoxVars" : { },
      "devFlowVars" : { },
      "minLogLv" : "NONE",
      "code" : "const difPeak = ${cs.mdifPeak};\r\nconst positions = ${position};\r\nconst k5mLow = ${cs.k5m.low};\r\nconst k5mHigh = ${cs.k5m.high};\r\n\r\nfunction getStopPositionSide(){\r\n    return difPeak.trendInfo.state == 'RISE' ? \"LONG\" : \"SHORT\";\r\n}\r\n\r\n\r\nconst stopPositionSide = getStopPositionSide();\r\nconst positionSide  = stopPositionSide == 'LONG' ? 'SHORT' : 'LONG';\r\n\r\n$bzk.putObj('positionSide',positionSide);\r\n$bzk.putObj('stopPositionSide',stopPositionSide);\r\n$bzk.putObj('kSize',(k5mHigh-k5mLow)*${kSizeRate});\r\n\r\nconst tarPostion = positions[stopPositionSide];\r\n$bzk.put('tarPostion',JSON.stringify(tarPostion));\r\n\r\nfunction getGap(){\r\n    const entryPrice = tarPostion.entryPrice;\r\n    const markPrice = tarPostion.markPrice;\r\n    const positionSide = tarPostion.positionSide;\r\n    const difP = positionSide == 'LONG' ? (markPrice - entryPrice) : (entryPrice-markPrice) ;\r\n    return difP;\r\n}\r\n$bzk.putObj('positionGap',getGap());\r\n\r\ntrue;",
      "polyglot" : "js",
      "resultLv" : "not_specify",
      "resultKey" : "initVar"
    }, {
      "clazz" : "net.bzk.flow.model.Action$SubFlowAction",
      "uid" : "hSBxZdqD8vhx",
      "name" : "Order",
      "tryErrorble" : false,
      "enable" : "true",
      "devBoxVars" : { },
      "devFlowVars" : { },
      "minLogLv" : "NONE",
      "flowUid" : "substoplimit",
      "asynced" : false,
      "inputData" : [ {
        "key" : "positionSide",
        "val" : "${positionSide}"
      }, {
        "key" : "position",
        "val" : "${position}"
      }, {
        "key" : "symbol",
        "val" : "${symbol}"
      }, {
        "key" : "runStoped",
        "val" : "true"
      }, {
        "key" : "trigger",
        "val" : "fuse"
      }, {
        "key" : "runLimit",
        "val" : "false"
      }, {
        "key" : "orderStopBody",
        "val" : "!javascript===\nconst exPrice = ${binanceQuote.all.avgPrice};\nconst tarPostion = ${tarPostion};\nconst positionGap = ${positionGap};\nconst kSize = ${kSize};\n\nfunction calcTargetPrice(){\n    if(positionGap>kSize) return tarPostion.entryPrice;\n    return tarPostion.liquidationPrice;\n}\n\n\n\nconst body= {\n        \"targetIdxShift\":1,\n        \"gapRate\":-1,\n        \"attachName\":'peakStop',\n        \"targetPrice\":\n        \"attach\":{\n            \"stopPrice\":exPrice,\n            \"positionAmt\":tarPostion.positionAmt\n        }\n};\n\nbody;"
      } ],
      "outputReflects" : [ {
        "srcKey" : "__pk_result",
        "toKey" : {
          "lv" : "not_specify",
          "key" : "orderResult"
        }
      } ]
    }, {
      "clazz" : "net.bzk.flow.model.HttpAction",
      "uid" : "dHnvjwV3y2aZ",
      "name" : "lastStop",
      "tryErrorble" : false,
      "enable" : "true",
      "devBoxVars" : { },
      "devFlowVars" : { },
      "minLogLv" : "NONE",
      "url" : "${finExManageApiUrl}",
      "uriVariables" : { },
      "body" : "{\n    \"name\": \"order_pack/last\",\n    \"exchange\": \"binance\",\n     \"filter_map\": {\n        \"odPack\": {\n            \"prd_name\": \"${symbol}\",\n            \"positionSide\":\"${stopPositionSide}\",\n            \"attach_name\":\"peakStop\"\n        }\n    },\n    \"__bzk_api_key\": \"${finExManageApiKey}\"\n}",
      "method" : "POST",
      "headers" : { },
      "headersFlat" : "",
      "key" : {
        "lv" : "not_specify",
        "key" : "lastInfo"
      }
    }, {
      "clazz" : "net.bzk.flow.model.HttpAction",
      "uid" : "OLrVy3Ta1UxM",
      "name" : "GetNewOds",
      "tryErrorble" : false,
      "enable" : "true",
      "devBoxVars" : { },
      "devFlowVars" : { },
      "minLogLv" : "NONE",
      "url" : "${finExManageApiUrl}",
      "uriVariables" : { },
      "body" : "{\n    \"name\": \"order/query/get\",\n    \"exchange\": \"binance\",\n    \"symbol\": \"${symbol}\",\n    \"positionSide\":\"${stopPositionSide}\",\n    \"orderType\":\"STOP_MARKET\",\n    \"status\":\"NEW\",\n    \"__bzk_api_key\": \"${finExManageApiKey}\"\n}",
      "method" : "POST",
      "headers" : { },
      "headersFlat" : "",
      "key" : {
        "lv" : "not_specify",
        "key" : "newOdsInfo"
      }
    } ],
    "links" : [ {
      "clazz" : "net.bzk.flow.model.Link",
      "uid" : "gi4jptN8J514",
      "name" : "NoPos",
      "condition" : {
        "clazz" : "net.bzk.flow.model.Condition$ConditionNum",
        "kind" : "NONE",
        "next" : null,
        "left" : "!javascript===\nMath.abs( ${tarPostion.positionAmt})",
        "right" : "0",
        "type" : "lessthan_equal"
      },
      "transition" : {
        "toBox" : "",
        "endTag" : "${symbol} ${stopPositionSide} NoPos",
        "failEnd" : false,
        "endResultKeys" : [ ],
        "resultCode" : "{\n  \"ordered\": false,\n  \"breakName\": \"NoPos\"\n}"
      },
      "enable" : true
    }, {
      "clazz" : "net.bzk.flow.model.Link",
      "uid" : "UAQMAEclMM9j",
      "name" : "LastPriceAmt",
      "condition" : {
        "clazz" : "net.bzk.flow.model.Condition$ConditionCode",
        "kind" : "NONE",
        "next" : null,
        "polyglot" : "js",
        "code" : "const exPrice = ${binanceQuote.all.avgPrice};\nconst packInfo = ${lastInfo.odPack.orderPack};\nconst tarPostion = ${tarPostion};\nconst positionSide = '${stopPositionSide}';\nconst newOdsInfo = ${newOdsInfo};\n\nfunction checkOK(){ //true: order \n    if(packInfo == null) return true;\n    const lastOrderPrice = packInfo.attach.stopPrice;\n    const lastAmt = newOdsInfo.origQty;\n    const priceOK=  $directionUtils.isHighPrice(positionSide,lastOrderPrice,exPrice);\n    const amtOK = Math.abs( tarPostion.positionAmt) > lastAmt;\n    return priceOK || amtOK;\n}\n\n!checkOK();"
      },
      "transition" : {
        "toBox" : "",
        "endTag" : "${symbol} ${stopPositionSide} LastPriceAmt",
        "failEnd" : false,
        "endResultKeys" : [ ],
        "resultCode" : "{\n  \"ordered\": false,\n  \"breakName\": \"LastPriceAmt\"\n}"
      },
      "enable" : true
    } ],
    "vars" : { },
    "taskSort" : [ "viRNYSWGuVir", "gi4jptN8J514", "dHnvjwV3y2aZ", "OLrVy3Ta1UxM", "UAQMAEclMM9j", "hSBxZdqD8vhx" ],
    "whileJudgment" : null,
    "transition" : {
      "toBox" : "",
      "endTag" : "${symbol} ${stopPositionSide} Ordered",
      "failEnd" : false,
      "endResultKeys" : [ ],
      "resultCode" : "{\n  \"ordered\": true,\n  \"breakName\": \"NONE\"\n}"
    },
    "minLogLv" : "DEBUG"
  } ],
  "varCfgNames" : [ "fin-exchange-manage.json" ],
  "vars" : {
    "kSizeRate" : 1.5
  },
  "entry" : {
    "clazz" : "net.bzk.flow.model.Entry$PluginEntry",
    "boxUid" : "a4NkW28jdISd",
    "autoRegister" : false,
    "requiredKeys" : [ "__ALL__" ],
    "outputKeys" : [ "__pk_result" ]
  },
  "threadCfg" : {
    "corePoolSize" : 10,
    "maximumPoolSize" : 50,
    "keepAliveTime" : 500,
    "aliveUnit" : "MINUTES"
  },
  "version" : 61
}
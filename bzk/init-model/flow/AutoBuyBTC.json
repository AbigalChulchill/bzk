{"clazz":"net.bzk.flow.model.Flow","uid":"I5pVYoW4XaZf","name":"AutoBuyBTC","boxs":[{"clazz":"net.bzk.flow.model.Box","uid":"ssjy4fkJyhdF","name":"","actions":[{"clazz":"net.bzk.flow.model.HttpAction","uid":"UZKyphZQuRsJ","name":"ListCount","tryErrorble":false,"url":"${finProxyUrl}/proxy/tsdb","uriVariables":{},"body":"!javascript===\r\nconst q =  `\r\nimport \"date\"\r\nimport \"math\"\r\n\r\ntrAvgCount30= from(bucket: \"quote\")\r\n  |> range(start: -30d)\r\n  |> filter(fn: (r) =>\r\n    r._measurement == \"daily\" and\r\n    (r.valmean == \"volume\"  or\r\n    r.valmean == \"open\") and\r\n    r.name == \"bitcoin\"\r\n  )\r\n  |> map(fn: (r) => ({ r with _time: date.truncate(t: r._time, unit: 1d)    }))\r\n  |> pivot(rowKey:[\"_time\"], columnKey: [\"valmean\"], valueColumn: \"_value\")\r\n  |> map(fn: (r) => ({ r with _value: r.volume / r.open }))  \r\n  |>mean()\r\n  |> findColumn(\r\n    fn: (key) => true,\r\n    column: \"_value\"\r\n  )    \r\n\r\n\r\nt1 = from(bucket: \"quote\")\r\n  |> range(start: -6h)\r\n  |> filter(fn: (r) =>\r\n    r._measurement == \"realtime\" and\r\n    r.symbol == \"BTC\" \r\n  )\r\n  |> map(fn: (r) => ({ r with _time: date.truncate(t: r._time, unit: 1s) }))\r\n  |> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\r\n  |> map(fn: (r) => ({ r with _value: r.volume_24h / r.price  }))\r\n  |> map(fn: (r) => ({ r with _value: r._value / trAvgCount30[0]  }))\r\n  t1\r\n`;\r\n\r\nans= {\r\n    \"query\":q\r\n};\r\n\r\nans","method":"POST","headers":{},"headersFlat":"","key":{"lv":"not_specify","key":"countList"}},{"clazz":"net.bzk.flow.model.Action$JSONPathAction","uid":"XGsk3qIAfDNN","name":"toArray","tryErrorble":false,"syntax":"$..values.*","source":{"lv":"not_specify","key":"countList"},"target":{"lv":"not_specify","key":"countList"}}],"links":[],"vars":{},"taskSort":["UZKyphZQuRsJ","XGsk3qIAfDNN"],"whileJudgment":null,"transition":{"toBox":"","endTag":"END","failEnd":false,"endResultKeys":[]}},{"clazz":"net.bzk.flow.model.Box","uid":"y6wIhOLoo4Q7","name":"RecentOrderCheck","actions":[{"clazz":"net.bzk.flow.model.HttpAction","uid":"RkarJVfhCtq4","name":"ListRecentOrder","tryErrorble":false,"url":"${finProxyUrl}/proxy/tsdb","uriVariables":{},"body":"!javascript===\nconst q =  `\nfrom(bucket: \"quote\")\n  |> range(start: -15m)\n  |> filter(fn: (r) =>\n    r._measurement == \"ordermanage\" and\n    r._field == \"price\" and\n    r.symbol == \"BTC\"\n  )\n`;\n\nans= {\n    \"query\":q\n};\n\nans","method":"POST","headers":{},"headersFlat":"","key":{"lv":"not_specify","key":"recentList"}}],"links":[{"clazz":"net.bzk.flow.model.Link","uid":"37LwtDg7U7j7","name":"existRecntOrder","condition":{"clazz":"net.bzk.flow.model.Condition$ConditionTxt","kind":"NONE","next":null,"left":"${recentList}","right":"[]","not":true,"type":"equal"},"transition":{"toBox":"","endTag":"RecentOrder","failEnd":false,"endResultKeys":[]}}],"vars":{},"taskSort":["RkarJVfhCtq4","37LwtDg7U7j7"],"whileJudgment":null,"transition":{"toBox":"ssjy4fkJyhdF","endTag":null,"failEnd":false,"endResultKeys":[]}},{"clazz":"net.bzk.flow.model.Box","uid":"QZn0EUAhrCDe","name":"OverTurnCheck","actions":[{"clazz":"net.bzk.flow.model.Action$SubFlowAction","uid":"hIJcf5WTi2mq","name":"GetOverturnRate","tryErrorble":false,"flowUid":"9RLQvpmbGa35","asynced":false,"inputData":[{"key":"tsdbQuery","val":"import \"date\"\nimport \"math\"\n\ntrAvgCount30= from(bucket: \"quote\")\n  |> range(start: -30d)\n  |> filter(fn: (r) =>\n    r._measurement == \"daily\" and\n    (r.valmean == \"volume\"  or\n    r.valmean == \"open\") and\n    r.name == \"bitcoin\"\n  )\n  |> map(fn: (r) => ({ r with _time: date.truncate(t: r._time, unit: 1d)    }))\n  |> pivot(rowKey:[\"_time\"], columnKey: [\"valmean\"], valueColumn: \"_value\")\n  |> map(fn: (r) => ({ r with _value: r.volume / r.open }))\n  |>mean()\n  |> findColumn(\n    fn: (key) => true,\n    column: \"_value\"\n  )\n\n  priceAvg30 = from(bucket: \"quote\")\n  |> range(start: -30d)\n  |> filter(fn: (r) =>\n    r._measurement == \"daily\" and\n    r.valmean == \"open\" and\n    r.name == \"bitcoin\"\n  )\n  |> mean()\n  |> findColumn(\n    fn: (key) => true,\n    column: \"_value\"\n  )\n\n\nt1= from(bucket: \"quote\")\n  |> range(start: -5h)\n  |> filter(fn: (r) =>\n    r._measurement == \"realtime\" and\n    r.symbol == \"BTC\"\n  )\n  |> map(fn: (r) => ({ r with _time: date.truncate(t: r._time, unit: 1s) }))\n  |> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n  |> map(fn: (r) => ({ r with count24: r.volume_24h / r.price  }))\n  |> map(fn: (r) => ({ r with countRate24: (r.count24-trAvgCount30[0]) / trAvgCount30[0]  }))\n  |> map(fn: (r) => ({ r with priceRate: (r.price-priceAvg30[0])/priceAvg30[0]  }))\n  |> map(fn: (r) => ({ r with _value: (r.countRate24 * r.priceRate) *10.00  }))\n\n  t1"}],"outputReflects":[{"srcKey":"nearVal","toKey":{"lv":"not_specify","key":"tsdbQueryResult"}}]}],"links":[{"clazz":"net.bzk.flow.model.Link","uid":"TKJKsN1Na6Qx","name":"OverturnFilter","condition":{"clazz":"net.bzk.flow.model.Condition$ConditionNum","kind":"NONE","next":null,"left":"${tsdbQueryResult.val}","right":"-0.5","type":"greater_equal"},"transition":{"toBox":"","endTag":"noenoughOverturn","failEnd":false,"endResultKeys":[]}}],"vars":{},"taskSort":["hIJcf5WTi2mq","TKJKsN1Na6Qx"],"whileJudgment":null,"transition":{"toBox":"L3ntSbK55wM6","endTag":null,"failEnd":false,"endResultKeys":[]}},{"clazz":"net.bzk.flow.model.Box","uid":"L3ntSbK55wM6","name":"PriceBiasCheck","actions":[{"clazz":"net.bzk.flow.model.Action$SubFlowAction","uid":"gAnX9MVBEQH4","name":"GetBiasRate","tryErrorble":false,"flowUid":"9RLQvpmbGa35","asynced":false,"inputData":[{"key":"tsdbQuery","val":"avg30 = from(bucket: \"quote\")\r\n  |> range(start: -30d)\r\n  |> filter(fn: (r) =>\r\n    r._measurement == \"daily\" and\r\n    r.valmean == \"open\" and\r\n    r.name == \"bitcoin\"\r\n  )\r\n  |> mean()\r\n  |> findColumn(\r\n    fn: (key) => true,\r\n    column: \"_value\"\r\n  )  \r\n\r\n\r\nt1 = from(bucket: \"quote\")\r\n  |> range(start: -5h)\r\n  |> filter(fn: (r) =>\r\n    r._measurement == \"realtime\" and\r\n    r._field == \"price\" and\r\n    r.symbol == \"BTC\" \r\n  )\r\n  |> map(fn: (r) => ({ r with _value: (r._value-avg30[0]) / avg30[0]  }))\r\n\r\nt1"}],"outputReflects":[{"srcKey":"nearVal","toKey":{"lv":"not_specify","key":"tsdbQueryResult"}}]}],"links":[{"clazz":"net.bzk.flow.model.Link","uid":"5Tpm9sipTU7u","name":"PriceBiasFilter","condition":{"clazz":"net.bzk.flow.model.Condition$ConditionNum","kind":"NONE","next":null,"left":"${tsdbQueryResult.val}","right":"-0.086","type":"greater"},"transition":{"toBox":"","endTag":"noenoughPriceBias","failEnd":false,"endResultKeys":[]}}],"vars":{},"taskSort":["gAnX9MVBEQH4","5Tpm9sipTU7u"],"whileJudgment":null,"transition":{"toBox":"y6wIhOLoo4Q7","endTag":null,"failEnd":false,"endResultKeys":[]}}],"varCfgNames":["fin-proxy.json"],"vars":{},"entry":{"clazz":"net.bzk.flow.model.Entry$FixedRateEntry","boxUid":"QZn0EUAhrCDe","period":-1,"unit":"SECONDS","initialDelay":2},"logEncryptKey":"1234567890123456","threadCfg":{"corePoolSize":10,"maximumPoolSize":50,"keepAliveTime":500,"aliveUnit":"MINUTES"}}
{
  "clazz" : "net.bzk.flow.model.Flow",
  "uid" : "6MRqv4Te57zl",
  "name" : "SUB-strategy-dif-trace",
  "boxs" : [ {
    "clazz" : "net.bzk.flow.model.Box",
    "uid" : "KoOwMvZDE63r",
    "name" : "Box",
    "actions" : [ {
      "clazz" : "net.bzk.flow.model.Action$PolyglotAction",
      "uid" : "Qvqn3l33fFem",
      "name" : "InitVars",
      "tryErrorble" : false,
      "enable" : "true",
      "devBoxVars" : { },
      "devFlowVars" : { },
      "minLogLv" : "NONE",
      "code" : "const lastDifMap = ${lastDifMap};\r\nconst difPeak = ${cs.difPeak};\r\nconst mdifPeak = ${cs.mdifPeak};\r\nconst k5mLow = ${cs.k5m.low};\r\nconst k5mHigh = ${cs.k5m.high};\r\nconst nearPeak = difPeak.trendInfo.nearPeak;\r\n\r\nfunction getPositionSide(){\r\n    return difPeak.trendInfo.state == 'RISE' ? \"LONG\" : \"SHORT\";\r\n}\r\n\r\nconst positionSide = getPositionSide();\r\n\r\n$bzk.putObj('positionSide',positionSide);\r\n\r\n\r\nfunction getMPositionSide(){\r\n    return mdifPeak.trendInfo.state == 'RISE' ? \"LONG\" : \"SHORT\";\r\n}\r\n\r\nconst mpositionSide = getMPositionSide();\r\n\r\n$bzk.putObj('mpositionSide',mpositionSide);\r\n\r\nfunction getLastInfo(){\r\n    return lastDifMap['DifTrace_'+positionSide];\r\n}\r\n\r\nconst lastInfo = getLastInfo();\r\n\r\n$bzk.put('lastInfo',JSON.stringify(lastInfo));\r\n\r\nfunction getStopPrice(){\r\n\r\n    if(positionSide=='LONG'){\r\n        return k5mLow[nearPeak.key];\r\n    }else if(positionSide == 'SHORT'){\r\n        return k5mHigh[nearPeak.key];\r\n    }\r\n    throw new Error('getStopPrice not support='+positionSide);\r\n}\r\n\r\nfunction genOrderObjJson(){\r\n    const peakPrice=getStopPrice();\r\n    return JSON.stringify({\r\n        \"targetPrice\":-1,\r\n        \"stopPrice\": -1,\r\n        \"gapRate\":0.0025,\r\n        \"attachName\":'DifTraced',\r\n        \"attach\":{\r\n            \"stopPrice\":peakPrice,\r\n            \"nearPeak\":nearPeak\r\n        }\r\n    });\r\n}\r\n$bzk.put('~orderLimitBody',genOrderObjJson());\r\n\r\ntrue;",
      "polyglot" : "js",
      "resultLv" : "not_specify",
      "resultKey" : "InitVars"
    }, {
      "clazz" : "net.bzk.flow.model.Action$SubFlowAction",
      "uid" : "yBV3YHFsHfCI",
      "name" : "Order",
      "tryErrorble" : false,
      "enable" : "true",
      "devBoxVars" : { },
      "devFlowVars" : { },
      "minLogLv" : "NONE",
      "flowUid" : "substoplimit",
      "asynced" : false,
      "inputData" : [ {
        "key" : "positionSide",
        "val" : "${positionSide}"
      }, {
        "key" : "position",
        "val" : "${position}"
      }, {
        "key" : "symbol",
        "val" : "${symbol}"
      }, {
        "key" : "orderLimitBody",
        "val" : "${orderLimitBody}"
      }, {
        "key" : "runStoped",
        "val" : "false"
      }, {
        "key" : "trigger",
        "val" : "trace"
      } ],
      "outputReflects" : [ {
        "srcKey" : "__pk_result",
        "toKey" : {
          "lv" : "not_specify",
          "key" : "stopLimitResult"
        }
      } ]
    }, {
      "clazz" : "net.bzk.flow.model.Action$PolyglotAction",
      "uid" : "bFQCXjDFsG8P",
      "name" : "LastInfoVar",
      "tryErrorble" : false,
      "enable" : "true",
      "devBoxVars" : { },
      "devFlowVars" : { },
      "minLogLv" : "NONE",
      "code" : "const lastInfo = ${lastInfo};\r\nconst positions = ${position};\r\nconst positionSide = '${positionSide}';\r\nconst exPrice = ${binanceQuote.all.avgPrice};\r\nconst lastOrderPrice = ${lastInfo.orderPack.attach.stopPrice};\r\n\r\nconst orderPeakPosed =  $directionUtils.isHighPrice(positionSide,lastOrderPrice,exPrice);\r\n$bzk.putObj('orderPeakPosed',orderPeakPosed);\r\n\r\nfunction sumOrigQty(){\r\n    let ans = 0; \r\n    for (const o of lastInfo.orders) {\r\n        ans+= o.origQty;\r\n    } \r\n    return ans;\r\n}\r\n\r\nconst allOrigQty = sumOrigQty();\r\n$bzk.putObj('allOrigQty',allOrigQty);\r\n\r\nfunction calcOrderRate(){\r\n    const tarPos = positions[positionSide];\r\n    const posAmt = Math.abs(tarPos.positionAmt);\r\n    return posAmt / allOrigQty;\r\n}\r\n\r\nconst orderRate = calcOrderRate();\r\n$bzk.putObj('orderRate',orderRate);\r\n\r\ntrue;",
      "polyglot" : "js",
      "resultLv" : "not_specify",
      "resultKey" : "LastInfoVar"
    } ],
    "links" : [ {
      "clazz" : "net.bzk.flow.model.Link",
      "uid" : "PrtQc5mK5fOc",
      "name" : "PriceAmtCheck",
      "condition" : {
        "clazz" : "net.bzk.flow.model.Condition$ConditionCode",
        "kind" : "NONE",
        "next" : null,
        "polyglot" : "js",
        "code" : "const exPrice = ${binanceQuote.all.avgPrice};\r\nconst lastOrderPrice = ${lastInfo.orderPack.attach.stopPrice};\r\nconst positionSide = '${positionSide}';\r\nconst orderRate = ${orderRate};\r\n\r\nfunction check(){\r\n    if(lastOrderPrice == null) return true;\r\n    const orderPeakPosed =  ${orderPeakPosed};\r\n    if(!orderPeakPosed) return false;\r\n    const difP = Math.abs( lastOrderPrice-exPrice)/exPrice;\r\n    if (difP>${priceOverRate} ) return true;\r\n    return orderRate >${positionAmtLessTh};\r\n}\r\n\r\ncheck();"
      },
      "transition" : {
        "toBox" : "",
        "endTag" : "${symbol} ${positionSide} PriceAmtCheck",
        "failEnd" : false,
        "endResultKeys" : [ ],
        "resultCode" : "{\n  \"ordered\": false,\n  \"breakName\": \"PriceAmtCheck\"\n}"
      },
      "enable" : true
    }, {
      "clazz" : "net.bzk.flow.model.Link",
      "uid" : "vf5kuyx39UQw",
      "name" : "HasLastInfo",
      "condition" : {
        "clazz" : "net.bzk.flow.model.Condition$ConditionCode",
        "kind" : "NONE",
        "next" : null,
        "polyglot" : "js",
        "code" : "const lastInfo = ${lastInfo};\r\nlastInfo == null;"
      },
      "transition" : {
        "toBox" : "",
        "endTag" : "${symbol} ${positionSide} HasLastInfo",
        "failEnd" : false,
        "endResultKeys" : [ ],
        "resultCode" : "{\n  \"ordered\": false,\n  \"breakName\": \"HasLastInfo\"\n}"
      },
      "enable" : true
    }, {
      "clazz" : "net.bzk.flow.model.Link",
      "uid" : "frq4EfAYEZ1D",
      "name" : "OverTime",
      "condition" : {
        "clazz" : "net.bzk.flow.model.Condition$ConditionNum",
        "kind" : "NONE",
        "next" : null,
        "left" : "!javascript===\nconst lastInfo = ${lastInfo};\n$tsFunc.subtractKeySecondsToNow(lastInfo.orderPack.created_at);",
        "right" : "!javascript===\n60*60*4;",
        "type" : "greater"
      },
      "transition" : {
        "toBox" : "",
        "endTag" : "${symbol} ${positionSide} OverTime",
        "failEnd" : false,
        "endResultKeys" : [ ],
        "resultCode" : "{\n  \"ordered\": false,\n  \"breakName\": \"OverTime\"\n}"
      },
      "enable" : true
    }, {
      "clazz" : "net.bzk.flow.model.Link",
      "uid" : "DKTiAduexdfC",
      "name" : "CPosSide",
      "condition" : {
        "clazz" : "net.bzk.flow.model.Condition$ConditionCode",
        "kind" : "NONE",
        "next" : null,
        "polyglot" : "js",
        "code" : "const posSides = ['LONG', 'SHORT'];\nconst positionSide = '${positionSide}';\n!posSides.includes(positionSide);\n"
      },
      "transition" : {
        "toBox" : "",
        "endTag" : "${symbol} ${positionSide} CPosSide",
        "failEnd" : false,
        "endResultKeys" : [ ],
        "resultCode" : "{\n  \"ordered\": false,\n  \"breakName\": \"CPosSide\"\n}"
      },
      "enable" : true
    }, {
      "clazz" : "net.bzk.flow.model.Link",
      "uid" : "UEP0km6q5GWR",
      "name" : "SideDif",
      "condition" : {
        "clazz" : "net.bzk.flow.model.Condition$ConditionTxt",
        "kind" : "NONE",
        "next" : null,
        "left" : "${positionSide}",
        "right" : "${mpositionSide}",
        "not" : true,
        "type" : "equal"
      },
      "transition" : {
        "toBox" : "",
        "endTag" : "${symbol} ${positionSide} SideDif",
        "failEnd" : false,
        "endResultKeys" : [ ],
        "resultCode" : "{\n  \"ordered\": false,\n  \"breakName\": \"SideDif\"\n}"
      },
      "enable" : true
    }, {
      "clazz" : "net.bzk.flow.model.Link",
      "uid" : "Co1P2wZbkvGT",
      "name" : "MPeakBye",
      "condition" : {
        "clazz" : "net.bzk.flow.model.Condition$ConditionNum",
        "kind" : "NONE",
        "next" : null,
        "left" : "${cs.mdifPeak.trendInfo.nearPeak.dtime}",
        "right" : "330",
        "type" : "greater_equal"
      },
      "transition" : {
        "toBox" : "",
        "endTag" : "${symbol} ${positionSide} MPeakBye",
        "failEnd" : false,
        "endResultKeys" : [ ],
        "resultCode" : "{\n  \"ordered\": false,\n  \"breakName\": \"MPeakBye\"\n}"
      },
      "enable" : true
    } ],
    "vars" : { },
    "taskSort" : [ "Qvqn3l33fFem", "DKTiAduexdfC", "UEP0km6q5GWR", "Co1P2wZbkvGT", "vf5kuyx39UQw", "bFQCXjDFsG8P", "frq4EfAYEZ1D", "PrtQc5mK5fOc", "yBV3YHFsHfCI" ],
    "whileJudgment" : null,
    "transition" : {
      "toBox" : "",
      "endTag" : "${symbol} ${positionSide} Ordered",
      "failEnd" : false,
      "endResultKeys" : [ ],
      "resultCode" : "{\n  \"ordered\": true,\n  \"breakName\": \"NONE\"\n}"
    },
    "minLogLv" : "DEBUG"
  } ],
  "varCfgNames" : [ "fin-exchange-manage.json" ],
  "vars" : {
    "symbol" : "ETH",
    "priceOverRate" : 0.003,
    "positionAmtLessTh" : 0.1
  },
  "entry" : {
    "clazz" : "net.bzk.flow.model.Entry$PluginEntry",
    "boxUid" : "KoOwMvZDE63r",
    "autoRegister" : false,
    "requiredKeys" : [ "__ALL__" ],
    "outputKeys" : [ "__pk_result" ]
  },
  "threadCfg" : {
    "corePoolSize" : 10,
    "maximumPoolSize" : 50,
    "keepAliveTime" : 500,
    "aliveUnit" : "MINUTES"
  },
  "version" : 37
}
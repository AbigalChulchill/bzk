{
  "clazz" : "net.bzk.flow.model.Flow",
  "uid" : "eH4vMOnKs3ps",
  "name" : "SUB-strategy-dif-stop-limit",
  "boxs" : [ {
    "clazz" : "net.bzk.flow.model.Box",
    "uid" : "Xe4OI2dpu4qY",
    "name" : "RangeBigger",
    "actions" : [ {
      "clazz" : "net.bzk.flow.model.Action$PolyglotAction",
      "uid" : "nrl9G3HFHx8o",
      "name" : "RBVars",
      "tryErrorble" : false,
      "enable" : "true",
      "devBoxVars" : { },
      "devFlowVars" : { },
      "minLogLv" : "NONE",
      "code" : "const nearOverThPeak = ${nearOverThPeak};\r\nconst priceBigger = ${cs.priceBigger};\r\n\r\nfunction getPositionSide(){\r\n    if (nearOverThPeak.min == null && nearOverThPeak.max==null) return \"NOThPeak\";\r\n    if( nearOverThPeak.min == null ) return 'SHORT';\r\n    if( nearOverThPeak.max == null ) return 'LONG';\r\n    return nearOverThPeak.max.dtime<nearOverThPeak.min.dtime ? 'SHORT' : 'LONG';\r\n}\r\n\r\nconst positionSide = getPositionSide();\r\n\r\nfunction getTargetPriceBigger(){\r\n    if(positionSide=='NOThPeak') return \"NONE\";\r\n    return positionSide == 'LONG' ? priceBigger.lastMin : priceBigger.lastMax;\r\n}\r\n\r\n$bzk.putObj('positionSide',positionSide);\r\n$bzk.put('targetPriceBigger',JSON.stringify( getTargetPriceBigger()));\r\n\r\ntrue;",
      "polyglot" : "js",
      "resultLv" : "not_specify",
      "resultKey" : "RBVars"
    }, {
      "clazz" : "net.bzk.flow.model.Action$SubFlowAction",
      "uid" : "jlTrbwA7rhex",
      "name" : "CallCB",
      "tryErrorble" : false,
      "enable" : "true",
      "devBoxVars" : { },
      "devFlowVars" : { },
      "minLogLv" : "NONE",
      "flowUid" : "substoplimit",
      "asynced" : false,
      "inputData" : [ {
        "key" : "positionSide",
        "val" : "${positionSide}"
      }, {
        "key" : "position",
        "val" : "${position}"
      }, {
        "key" : "symbol",
        "val" : "${symbol}"
      }, {
        "key" : "orderLimitBody",
        "val" : "${orderLimitBody}"
      }, {
        "key" : "runStoped",
        "val" : "true"
      } ],
      "outputReflects" : [ {
        "srcKey" : "__pk_result",
        "toKey" : {
          "lv" : "not_specify",
          "key" : ""
        }
      } ]
    } ],
    "links" : [ {
      "clazz" : "net.bzk.flow.model.Link",
      "uid" : "HlR7OGHt8LZ3",
      "name" : "CPosSide",
      "condition" : {
        "clazz" : "net.bzk.flow.model.Condition$ConditionTxt",
        "kind" : "NONE",
        "next" : null,
        "left" : "${positionSide}",
        "right" : "NOThPeak",
        "not" : false,
        "type" : "equal"
      },
      "transition" : {
        "toBox" : "",
        "endTag" : "${symbol} ${positionSide} CPosSide",
        "failEnd" : false,
        "endResultKeys" : [ {
          "lv" : "not_specify",
          "key" : "nearOverThPeak"
        } ],
        "resultCode" : "{\n  \"ordered\": false,\n  \"breakName\": \"CPosSide\"\n}"
      },
      "enable" : true
    }, {
      "clazz" : "net.bzk.flow.model.Link",
      "uid" : "uq9TIUtqIv9M",
      "name" : "Cbigger",
      "condition" : {
        "clazz" : "net.bzk.flow.model.Condition$ConditionNum",
        "kind" : "NONE",
        "next" : null,
        "left" : "${targetPriceBigger.time}",
        "right" : "!javascript===\n60*60*4",
        "type" : "lessthan"
      },
      "transition" : {
        "toBox" : "",
        "endTag" : "${symbol} ${positionSide} Cbigger",
        "failEnd" : false,
        "endResultKeys" : [ {
          "lv" : "not_specify",
          "key" : "targetPriceBigger"
        } ],
        "resultCode" : "{\n  \"ordered\": false,\n  \"breakName\": \"Cbigger\"\n}"
      },
      "enable" : true
    } ],
    "vars" : { },
    "taskSort" : [ "nrl9G3HFHx8o", "HlR7OGHt8LZ3", "uq9TIUtqIv9M", "jlTrbwA7rhex" ],
    "whileJudgment" : null,
    "transition" : {
      "toBox" : "",
      "endTag" : "${symbol} ${positionSide} CallCB",
      "failEnd" : false,
      "endResultKeys" : [ ],
      "resultCode" : "{\n  \"ordered\": true,\n  \"breakName\": \"NONE\"\n}"
    },
    "minLogLv" : "DEBUG"
  }, {
    "clazz" : "net.bzk.flow.model.Box",
    "uid" : "AB8uzjML8NdQ",
    "name" : "Box",
    "actions" : [ {
      "clazz" : "net.bzk.flow.model.Action$PolyglotAction",
      "uid" : "66NmfSdxlftf",
      "name" : "Vars",
      "tryErrorble" : false,
      "enable" : "true",
      "devBoxVars" : { },
      "devFlowVars" : { },
      "minLogLv" : "NONE",
      "code" : "const difPeak = ${cs.difPeak};\r\nconst difPoints = $tsFunc.toPoints(${cs.dif});\r\nconst difTH = ${cs.difTH};\r\n\r\nfunction getPositionSide(){\r\n    return difPeak.trendInfo.maxList.hasOwnProperty('0.0') ? 'LONG' : 'SHORT' ;\r\n}\r\n\r\nfunction getThVal(){\r\n    var key;\r\n    for (var k in difTH) {\r\n        return difTH[k];\r\n    }\r\n}\r\n\r\nconst positionSide = getPositionSide();\r\nconst nearPeak = difPeak.trendInfo.nearPeak;\r\n\r\n\r\nfunction genOrderObjJson(){\r\n    return JSON.stringify({\r\n        \"targetPrice\":-1,\r\n        \"stopPrice\": -1,\r\n        \"gapRate\":0.002\r\n    });\r\n}\r\n\r\nfunction getNearOverThPeak(){\r\n    const th = getThVal();\r\n    let minDp , maxDp;\r\n    for (const dp of difPoints) {\r\n        if(Math.abs( dp.val)>th){\r\n            if ( dp.val<0 && minDp==null){\r\n                minDp = dp;\r\n            }\r\n            if ( dp.val>0 && maxDp==null){\r\n                maxDp = dp;\r\n            }\r\n        }\r\n    }\r\n    return {\r\n                min:minDp,\r\n                max:maxDp\r\n            };\r\n}\r\n\r\n\r\n\r\n$bzk.putObj('positionSide',positionSide);\r\n$bzk.put('nearPeak',JSON.stringify( nearPeak));\r\n$bzk.put('~nearOverThPeak',JSON.stringify( getNearOverThPeak()));\r\n$bzk.putObj('~thVal',getThVal());\r\n$bzk.put('~orderLimitBody',genOrderObjJson());\r\ntrue;",
      "polyglot" : "js",
      "resultLv" : "not_specify",
      "resultKey" : "vars"
    }, {
      "clazz" : "net.bzk.flow.model.Action$SubFlowAction",
      "uid" : "wcOS08RF0tY6",
      "name" : "CallStopLimit",
      "tryErrorble" : false,
      "enable" : "true",
      "devBoxVars" : { },
      "devFlowVars" : { },
      "minLogLv" : "NONE",
      "flowUid" : "substoplimit",
      "asynced" : false,
      "inputData" : [ {
        "key" : "positionSide",
        "val" : "${positionSide}"
      }, {
        "key" : "position",
        "val" : "${position}"
      }, {
        "key" : "symbol",
        "val" : "${symbol}"
      }, {
        "key" : "orderLimitBody",
        "val" : "${orderLimitBody}"
      }, {
        "key" : "runStoped",
        "val" : "true"
      } ],
      "outputReflects" : [ {
        "srcKey" : "__pk_result",
        "toKey" : {
          "lv" : "not_specify",
          "key" : "stopLimitResult"
        }
      } ]
    } ],
    "links" : [ {
      "clazz" : "net.bzk.flow.model.Link",
      "uid" : "T5IC58bnUYi6",
      "name" : "CTime",
      "condition" : {
        "clazz" : "net.bzk.flow.model.Condition$ConditionNum",
        "kind" : "NONE",
        "next" : null,
        "left" : "${nearPeak.dtime}",
        "right" : "300",
        "type" : "not_equal"
      },
      "transition" : {
        "toBox" : "Xe4OI2dpu4qY",
        "endTag" : null,
        "failEnd" : false,
        "endResultKeys" : [ {
          "lv" : "not_specify",
          "key" : "nearPeak"
        } ],
        "resultCode" : "{\n  \"ordered\": false,\n  \"breakName\": \"CTime\"\n}"
      },
      "enable" : true
    }, {
      "clazz" : "net.bzk.flow.model.Link",
      "uid" : "EzMDMJOZPkxm",
      "name" : "CTH",
      "condition" : {
        "clazz" : "net.bzk.flow.model.Condition$ConditionNum",
        "kind" : "NONE",
        "next" : null,
        "left" : "!javascript===\nMath.abs(${nearPeak.val});",
        "right" : "!javascript===\r\nMath.abs(${thVal});\r\n",
        "type" : "lessthan"
      },
      "transition" : {
        "toBox" : "Xe4OI2dpu4qY",
        "endTag" : null,
        "failEnd" : false,
        "endResultKeys" : [ {
          "lv" : "not_specify",
          "key" : "thVal"
        }, {
          "lv" : "not_specify",
          "key" : "nearPeak"
        } ],
        "resultCode" : "{\n  \"ordered\": false,\n  \"breakName\": \"CTH\"\n}"
      },
      "enable" : true
    } ],
    "vars" : { },
    "taskSort" : [ "66NmfSdxlftf", "T5IC58bnUYi6", "EzMDMJOZPkxm", "wcOS08RF0tY6" ],
    "whileJudgment" : null,
    "transition" : {
      "toBox" : "",
      "endTag" : "${symbol} ${positionSide} LimitStop",
      "failEnd" : false,
      "endResultKeys" : [ ],
      "resultCode" : "{\n  \"ordered\": true,\n  \"breakName\": \"NONE\"\n}"
    },
    "minLogLv" : "DEBUG"
  } ],
  "varCfgNames" : [ ],
  "vars" : { },
  "entry" : {
    "clazz" : "net.bzk.flow.model.Entry$PluginEntry",
    "boxUid" : "AB8uzjML8NdQ",
    "autoRegister" : false,
    "requiredKeys" : [ "__ALL__" ],
    "outputKeys" : [ "__pk_result" ]
  },
  "threadCfg" : {
    "corePoolSize" : 10,
    "maximumPoolSize" : 50,
    "keepAliveTime" : 500,
    "aliveUnit" : "MINUTES"
  },
  "version" : 27
}
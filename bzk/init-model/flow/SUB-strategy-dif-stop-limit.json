{
  "clazz" : "net.bzk.flow.model.Flow",
  "uid" : "eH4vMOnKs3ps",
  "name" : "SUB-strategy-dif-stop-limit",
  "boxs" : [ {
    "clazz" : "net.bzk.flow.model.Box",
    "uid" : "AB8uzjML8NdQ",
    "name" : "Box",
    "actions" : [ {
      "clazz" : "net.bzk.flow.model.Action$PolyglotAction",
      "uid" : "66NmfSdxlftf",
      "name" : "Vars",
      "tryErrorble" : false,
      "enable" : "true",
      "devBoxVars" : { },
      "devFlowVars" : { },
      "minLogLv" : "NONE",
      "code" : "const difPeak = ${cs.difPeak};\r\nconst difPoints = $tsFunc.toPoints(${cs.dif});\r\nconst difTH = ${cs.difTH};\r\nconst k5mLow = ${cs.k5m.low};\r\nconst k5mHigh = ${cs.k5m.high};\r\nconst positions = ${position};\r\n\r\nfunction getThVal(){\r\n    var key;\r\n    for (var k in difTH) {\r\n        return difTH[k];\r\n    }\r\n}\r\n\r\nfunction getPositionSide(){\r\n    return difPeak.trendInfo.state == 'FALL' ? 'SHORT':'LONG';\r\n}\r\n\r\nconst positionSide = getPositionSide();\r\nconst stopPositionSide = positionSide == 'LONG' ? 'SHORT' : 'LONG';\r\nconst tarPostion = positions[stopPositionSide];\r\n$bzk.put('tarPostion',JSON.stringify(tarPostion));\r\n\r\n\r\nconst nearPeak = difPeak.trendInfo.nearPeak;\r\n\r\n\r\nfunction getStopPrice(){\r\n\r\n    if(positionSide=='LONG'){\r\n        return k5mLow[nearPeak.key];\r\n    }else if(positionSide == 'SHORT'){\r\n        return k5mHigh[nearPeak.key];\r\n    }\r\n    throw new Error('getStopPrice not support='+positionSide);\r\n}\r\n\r\nfunction genOrderObjJson(){\r\n    const peakPrice=getStopPrice();\r\n    return JSON.stringify({\r\n        \"targetPrice\":peakPrice,\r\n        \"stopPrice\": -1,\r\n        \"gapRate\":-1,\r\n        \"attachName\":'DifTrace',\r\n        \"attach\":{\r\n            \"stopPrice\":peakPrice,\r\n            \"nearPeak\":nearPeak\r\n        }\r\n    });\r\n}\r\n\r\n$bzk.putObj('positionSide',positionSide);\r\n$bzk.put('difNearPeak',JSON.stringify( nearPeak));\r\n$bzk.putObj('~thVal',getThVal());\r\n$bzk.put('~orderLimitBody',genOrderObjJson());\r\ntrue;",
      "polyglot" : "js",
      "resultLv" : "not_specify",
      "resultKey" : "vars"
    }, {
      "clazz" : "net.bzk.flow.model.Action$SubFlowAction",
      "uid" : "wcOS08RF0tY6",
      "name" : "CallStopLimit",
      "tryErrorble" : false,
      "enable" : "true",
      "devBoxVars" : { },
      "devFlowVars" : { },
      "minLogLv" : "NONE",
      "flowUid" : "substoplimit",
      "asynced" : false,
      "inputData" : [ {
        "key" : "positionSide",
        "val" : "${positionSide}"
      }, {
        "key" : "position",
        "val" : "${position}"
      }, {
        "key" : "symbol",
        "val" : "${symbol}"
      }, {
        "key" : "orderLimitBody",
        "val" : "${orderLimitBody}"
      }, {
        "key" : "runStoped",
        "val" : "false"
      }, {
        "key" : "trigger",
        "val" : "dif"
      } ],
      "outputReflects" : [ {
        "srcKey" : "__pk_result",
        "toKey" : {
          "lv" : "not_specify",
          "key" : "stopLimitResult"
        }
      } ]
    } ],
    "links" : [ {
      "clazz" : "net.bzk.flow.model.Link",
      "uid" : "T5IC58bnUYi6",
      "name" : "CRebound",
      "condition" : {
        "clazz" : "net.bzk.flow.model.Condition$ConditionCode",
        "kind" : "NONE",
        "next" : null,
        "polyglot" : "js",
        "code" : "const difPeak = ${cs.difPeak};\nconst difNearPeak = ${difNearPeak};\nconst positionSide = '${positionSide}';\nconst thVal = ${thVal};\nconst difBigger = ${cs.difBigger};\n\nfunction checkLONG(){\n    const tarTh = -1 * thVal;\n    if(difPeak.last.val>thVal) return false;\n    if(difNearPeak.val>thVal) throw new Error('checkLONG difNearPeak.val='+difNearPeak.val+\" thVal=\"+thVal);\n    return difBigger.previousVal<difBigger.lastVal;\n}\n\nfunction checkSHORT(){\n    const tarTh =  thVal;\n    if(difPeak.last.val<thVal) return false;\n    if(difNearPeak.val<thVal) throw new Error('checkSHORT difNearPeak.val='+difNearPeak.val+\" thVal=\"+thVal);\n    return difBigger.previousVal>difBigger.lastVal;\n}\n\nfunction check(){\n    if(positionSide == 'LONG'){\n        return checkLONG();\n    }else if(positionSide == 'SHORT'){\n        return checkSHORT();\n    }\n    throw new Error(positionSide);\n}\n\n\n!check();"
      },
      "transition" : {
        "toBox" : "",
        "endTag" : "${symbol} ${positionSide} CRebound",
        "failEnd" : false,
        "endResultKeys" : [ {
          "lv" : "not_specify",
          "key" : "cs.difPeak.last"
        }, {
          "lv" : "not_specify",
          "key" : "thVal"
        } ],
        "resultCode" : "{\n  \"ordered\": false,\n  \"breakName\": \"CRebound\"\n}"
      },
      "enable" : true
    }, {
      "clazz" : "net.bzk.flow.model.Link",
      "uid" : "ARQTOmYaHf9f",
      "name" : "OverTH",
      "condition" : {
        "clazz" : "net.bzk.flow.model.Condition$ConditionNum",
        "kind" : "NONE",
        "next" : null,
        "left" : "!javascript===\nMath.abs( ${difNearPeak.val});",
        "right" : "${thVal}",
        "type" : "lessthan_equal"
      },
      "transition" : {
        "toBox" : "",
        "endTag" : "${symbol} ${positionSide} OverTH",
        "failEnd" : false,
        "endResultKeys" : [ {
          "lv" : "not_specify",
          "key" : "cs.difBigger.lastVal"
        }, {
          "lv" : "not_specify",
          "key" : "thVal"
        } ],
        "resultCode" : "{\n  \"ordered\": false,\n  \"breakName\": \"OverTH\"\n}"
      },
      "enable" : true
    }, {
      "clazz" : "net.bzk.flow.model.Link",
      "uid" : "Ip2jdhO8VTwD",
      "name" : "OverTime",
      "condition" : {
        "clazz" : "net.bzk.flow.model.Condition$ConditionNum",
        "kind" : "NONE",
        "next" : null,
        "left" : "${difNearPeak.dtime}",
        "right" : "360",
        "type" : "greater"
      },
      "transition" : {
        "toBox" : "",
        "endTag" : "${symbol} ${positionSide} OverTime",
        "failEnd" : false,
        "endResultKeys" : [ {
          "lv" : "not_specify",
          "key" : "difNearPeak"
        } ],
        "resultCode" : "{\n  \"ordered\": false,\n  \"breakName\": \"OverTime\"\n}"
      },
      "enable" : true
    } ],
    "vars" : { },
    "taskSort" : [ "66NmfSdxlftf", "ARQTOmYaHf9f", "T5IC58bnUYi6", "Ip2jdhO8VTwD", "wcOS08RF0tY6" ],
    "whileJudgment" : null,
    "transition" : {
      "toBox" : "",
      "endTag" : "${symbol} ${positionSide} LimitStop",
      "failEnd" : false,
      "endResultKeys" : [ ],
      "resultCode" : "{\n  \"ordered\": true,\n  \"breakName\": \"NONE\"\n}"
    },
    "minLogLv" : "DEBUG"
  } ],
  "varCfgNames" : [ ],
  "vars" : { },
  "entry" : {
    "clazz" : "net.bzk.flow.model.Entry$PluginEntry",
    "boxUid" : "AB8uzjML8NdQ",
    "autoRegister" : false,
    "requiredKeys" : [ "__ALL__" ],
    "outputKeys" : [ "__pk_result" ]
  },
  "threadCfg" : {
    "corePoolSize" : 10,
    "maximumPoolSize" : 50,
    "keepAliveTime" : 500,
    "aliveUnit" : "MINUTES"
  },
  "version" : 64
}
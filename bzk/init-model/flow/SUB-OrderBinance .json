{
  "clazz" : "net.bzk.flow.model.Flow",
  "uid" : "02eQyaMwyojZ",
  "name" : "SUB-OrderBinance ",
  "boxs" : [ {
    "clazz" : "net.bzk.flow.model.Box",
    "uid" : "htivUO7YKtyD",
    "name" : "Box",
    "actions" : [ {
      "clazz" : "net.bzk.flow.model.HttpAction",
      "uid" : "OcPQySOCy0Gn",
      "name" : "PostOrder",
      "tryErrorble" : false,
      "enable" : true,
      "devBoxVars" : { },
      "devFlowVars" : { },
      "minLogLv" : "NONE",
      "url" : "${binance.proxyHost}proxy",
      "uriVariables" : { },
      "body" : "${body}",
      "method" : "POST",
      "headers" : { },
      "headersFlat" : "",
      "key" : {
        "lv" : "not_specify",
        "key" : "postResult"
      }
    }, {
      "clazz" : "net.bzk.flow.model.Action$MailAction",
      "uid" : "fzgczwZFFaF2",
      "name" : "NotifyMail",
      "tryErrorble" : true,
      "enable" : false,
      "devBoxVars" : { },
      "devFlowVars" : { },
      "minLogLv" : "NONE",
      "smtpHost" : "\"smtp.gmail.com\"",
      "smtpPort" : "465",
      "username" : "${gmail.username}",
      "password" : "${gmail.password}",
      "toMail" : "a29243004@gmail.com",
      "subject" : "Order CMC",
      "body" : "    name=\"post_order\" \\n\\r\n    investedRate=${investedRate} \\n\\r\n    guardRange=${guardRange} \\n\\r\n    quote=${postResult.quantity} \\n\\r\n    symbol=\"${symbol}\" \\n\\r\n    selled=${selled} \\n\\r"
    }, {
      "clazz" : "net.bzk.flow.model.Action$VarModifyAction",
      "uid" : "3H1IkGkleZp5",
      "name" : "GenBody",
      "tryErrorble" : false,
      "enable" : true,
      "devBoxVars" : { },
      "devFlowVars" : { },
      "minLogLv" : "NONE",
      "flatData" : [ {
        "key" : "body",
        "val" : " {\n    \"apiKey\": \"${binance.key}\",\n    \"secret\": \"${binance.secret}\",\n    \"name\": \"post_limit_order\",\n    \"symbol\": \"${symbol}\",\n    \"positionSide\": \"${positionSide}\",\n    \"withdrawAmountRate\": ${withdrawAmountRate},\n    \"gapRate\":${gapRate},\n    \"size\":${size},\n    \"price\":1500\n}\n"
      }, {
        "key" : "body.tags",
        "val" : "!javascript===\nvar tags =  ${tags};\ntags.push(\"bot\");\ntags;"
      } ]
    }, {
      "clazz" : "net.bzk.flow.model.HttpAction",
      "uid" : "iD0dtfzuxhXl",
      "name" : "RecordTSDB",
      "tryErrorble" : false,
      "enable" : true,
      "devBoxVars" : { },
      "devFlowVars" : { },
      "minLogLv" : "NONE",
      "url" : "${finProxyUrl}/proxy/tsdb/insert/multiple",
      "uriVariables" : { },
      "body" : "!javascript===\n\nconst sbl = '${symbol}';\nconst positionSide = '${positionSide}';\nconst postResult = ${postResult};\n\n\nlet ans = [];\n\nfunction genPointDto(fd,v,idx){\n    let  now = new Date();\n    now.setSeconds(now.getSeconds() + idx*60);\n    const nowiso = now.toISOString();\n  const row = {\n      measurement : 'order-measurement',\n      tags:{\n        \"symbol\" : sbl,        \n        \"category\":'cryptocurrency',\n        \"source\":'binance',\n        \"positionSide\":positionSide,\n        \"trigger\":'${trigger}'\n      },\n      field: fd,\n      val:v,\n      time :nowiso\n  };\n  return row;\n}\n\n\n\nfor(let i=0;i<postResult.length;i++){\n    let od = postResult[i];\n    ans.push(genPointDto('price',od.price,i));\n    ans.push(genPointDto('quantity',od.origQty,i));\n}\n\nans;",
      "method" : "POST",
      "headers" : { },
      "headersFlat" : "{}",
      "key" : {
        "lv" : "not_specify",
        "key" : "tsdbPosted"
      }
    } ],
    "links" : [ ],
    "vars" : {
      "idx" : 0,
      "quotes" : [ ]
    },
    "taskSort" : [ "fzgczwZFFaF2", "3H1IkGkleZp5", "OcPQySOCy0Gn", "iD0dtfzuxhXl" ],
    "whileJudgment" : null,
    "transition" : {
      "toBox" : "",
      "endTag" : "${symbol} ${positionSide} ${trigger}",
      "failEnd" : false,
      "endResultKeys" : [ ],
      "resultCode" : ""
    },
    "minLogLv" : "DEBUG"
  } ],
  "varCfgNames" : [ "binance.json", "mail.json", "fin-proxy.json" ],
  "vars" : {
    "symbol" : "ETH",
    "size" : 2,
    "positionSide" : "LONG",
    "withdrawAmountRate" : 0.005,
    "gapRate" : 0.002,
    "tags" : [ "shortTermBuy" ]
  },
  "entry" : {
    "clazz" : "net.bzk.flow.model.Entry$PluginEntry",
    "boxUid" : "htivUO7YKtyD",
    "autoRegister" : false,
    "requiredKeys" : [ "positionSide", "symbol", "withdrawAmountRate", "tags", "trigger", "size", "gapRate" ],
    "outputKeys" : [ ]
  },
  "threadCfg" : {
    "corePoolSize" : 10,
    "maximumPoolSize" : 50,
    "keepAliveTime" : 500,
    "aliveUnit" : "MINUTES"
  },
  "version" : 31
}
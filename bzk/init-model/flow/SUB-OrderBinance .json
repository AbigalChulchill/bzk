{
  "clazz" : "net.bzk.flow.model.Flow",
  "uid" : "02eQyaMwyojZ",
  "name" : "SUB-OrderBinance ",
  "boxs" : [ {
    "clazz" : "net.bzk.flow.model.Box",
    "uid" : "htivUO7YKtyD",
    "name" : "Box",
    "actions" : [ {
      "clazz" : "net.bzk.flow.model.HttpAction",
      "uid" : "OcPQySOCy0Gn",
      "name" : "PostOrder",
      "tryErrorble" : false,
      "enable" : true,
      "devBoxVars" : { },
      "devFlowVars" : { },
      "minLogLv" : "NONE",
      "url" : "${binance.proxyHost}proxy",
      "uriVariables" : { },
      "body" : "${body}",
      "method" : "POST",
      "headers" : { },
      "headersFlat" : "",
      "key" : {
        "lv" : "not_specify",
        "key" : "postResult"
      }
    }, {
      "clazz" : "net.bzk.flow.model.Action$MailAction",
      "uid" : "fzgczwZFFaF2",
      "name" : "NotifyMail",
      "tryErrorble" : true,
      "enable" : false,
      "devBoxVars" : { },
      "devFlowVars" : { },
      "minLogLv" : "NONE",
      "smtpHost" : "\"smtp.gmail.com\"",
      "smtpPort" : "465",
      "username" : "${gmail.username}",
      "password" : "${gmail.password}",
      "toMail" : "a29243004@gmail.com",
      "subject" : "Order CMC",
      "body" : "    name=\"post_order\" \\n\\r\n    investedRate=${investedRate} \\n\\r\n    guardRange=${guardRange} \\n\\r\n    quote=${postResult.quantity} \\n\\r\n    symbol=\"${symbol}\" \\n\\r\n    selled=${selled} \\n\\r"
    }, {
      "clazz" : "net.bzk.flow.model.Action$VarModifyAction",
      "uid" : "3H1IkGkleZp5",
      "name" : "GenBody",
      "tryErrorble" : false,
      "enable" : true,
      "devBoxVars" : { },
      "devFlowVars" : { },
      "minLogLv" : "NONE",
      "flatData" : [ {
        "key" : "body",
        "val" : "!javascript===\nconst side ='${side}';\nconst quote = ${quote};\n\nlet pd = {\n    \"symbol\": \"${symbol}\",\n    \"investedRate\": ${oneInvestedRate},\n    \"apiKey\": \"${binance.key}\",\n    \"secret\": \"${binance.secret}\",\n    \"selled\": side == 'SELL',\n    \"name\": \"post_order\",\n    \"quote\":quote,\n    \"guardRange\": ${guardRange},\n    \"currentMove\": ${currentMove}\n};\npd;"
      }, {
        "key" : "body.tags",
        "val" : "!javascript===\nvar tags =  ${tags};\ntags.push(\"bot\");\ntags;"
      } ]
    }, {
      "clazz" : "net.bzk.flow.model.HttpAction",
      "uid" : "iD0dtfzuxhXl",
      "name" : "RecordTSDB",
      "tryErrorble" : false,
      "enable" : true,
      "devBoxVars" : { },
      "devFlowVars" : { },
      "minLogLv" : "NONE",
      "url" : "${finProxyUrl}/proxy/tsdb/insert/multiple",
      "uriVariables" : { },
      "body" : "!javascript===\n\nconst sbl = '${symbol}';\nconst side = '${side}';\nconst postResult = ${postResult};\nlet  now = new Date();\nnow.setSeconds(now.getSeconds() + ${idx}*60);\nconst nowiso = now.toISOString();\n\nlet ans = [];\n\nfunction genPointDto(fd,v){\n  const row = {\n      measurement : 'order-measurement',\n      tags:{\n        \"symbol\" : sbl,        \n        \"category\":'cryptocurrency',\n        \"source\":'binance',\n        \"side\":side,\n        \"trigger\":'${trigger}'\n      },\n      field: fd,\n      val:v,\n      time :nowiso\n  };\n  return row;\n}\n\nans.push(genPointDto('price',postResult.price));\nans.push(genPointDto('stopPrice',postResult.stopPrice));\nans.push(genPointDto('quantity',postResult.quantity));\n\nans;",
      "method" : "POST",
      "headers" : { },
      "headersFlat" : "{}",
      "key" : {
        "lv" : "not_specify",
        "key" : "tsdbPosted"
      }
    }, {
      "clazz" : "net.bzk.flow.model.Action$VarModifyAction",
      "uid" : "R8kJWNNwM3H0",
      "name" : "LoopVars",
      "tryErrorble" : false,
      "enable" : true,
      "devBoxVars" : { },
      "devFlowVars" : { },
      "minLogLv" : "NONE",
      "flatData" : [ {
        "key" : "quote",
        "val" : "!javascript===\nconst side = \"${side}\";\nconst quoteBase = ${quoteBase};\nconst quoteSize = ${quoteSize};\nconst idx = ${idx};\nconst quoteRange = ${quoteRange};\nconst rate = calcRate();\nconst dr = (rate / quoteSize) * idx;\nconst quote = quoteBase*(1 + dr ) ;\n\nfunction calcRate(){\n    return side == \"SELL\" ? -1 * quoteRange : quoteRange;\n}\n\nquote;"
      }, {
        "key" : "idx",
        "val" : "!javascript===\n${idx}+1;"
      }, {
        "key" : "oneInvestedRate",
        "val" : "!javascript===\nconst rate= ${investedRate};\nconst sr = rate/${quoteSize};\nsr;"
      } ]
    } ],
    "links" : [ ],
    "vars" : {
      "idx" : 0,
      "quotes" : [ ]
    },
    "taskSort" : [ "R8kJWNNwM3H0", "fzgczwZFFaF2", "3H1IkGkleZp5", "OcPQySOCy0Gn", "iD0dtfzuxhXl" ],
    "whileJudgment" : {
      "clazz" : "net.bzk.flow.model.Condition$ConditionNum",
      "kind" : "NONE",
      "next" : null,
      "left" : "${idx}",
      "right" : "${quoteSize}\n",
      "type" : "lessthan"
    },
    "transition" : {
      "toBox" : "",
      "endTag" : "${symbol} ${side} ${trigger}",
      "failEnd" : false,
      "endResultKeys" : [ ],
      "resultCode" : ""
    },
    "minLogLv" : "DEBUG"
  } ],
  "varCfgNames" : [ "binance.json", "mail.json", "fin-proxy.json" ],
  "vars" : {
    "quoteRange" : 0.05,
    "symbol" : "EOS",
    "side" : "BUY",
    "investedRate" : 0.1,
    "quoteSize" : 4,
    "guardRange" : 0.05,
    "currentMove" : 0.6,
    "trigger" : "NONE",
    "quoteBase" : 4,
    "tags" : [ "test" ]
  },
  "entry" : {
    "clazz" : "net.bzk.flow.model.Entry$PluginEntry",
    "boxUid" : "htivUO7YKtyD",
    "autoRegister" : false,
    "requiredKeys" : [ "side", "symbol", "investedRate", "guardRange", "currentMove", "tags", "trigger", "quoteSize", "quoteBase", "quoteRange" ],
    "outputKeys" : [ ]
  },
  "threadCfg" : {
    "corePoolSize" : 10,
    "maximumPoolSize" : 50,
    "keepAliveTime" : 500,
    "aliveUnit" : "MINUTES"
  },
  "version" : 17
}
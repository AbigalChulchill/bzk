{
  "clazz" : "net.bzk.flow.model.Flow",
  "uid" : "kCmTvvaxfIBr",
  "name" : "SUB-SellBuyPeaker",
  "boxs" : [ {
    "clazz" : "net.bzk.flow.model.Box",
    "uid" : "36vcsdaTkWky",
    "name" : "Record_BYE",
    "actions" : [ {
      "clazz" : "net.bzk.flow.model.HttpAction",
      "uid" : "65eKSmNiL1nJ",
      "name" : "PostFinProxy",
      "tryErrorble" : false,
      "devBoxVars" : { },
      "devFlowVars" : { },
      "url" : "${finProxyUrl}/proxy/tsdb/insert/multiple",
      "uriVariables" : { },
      "body" : "${body}",
      "method" : "POST",
      "headers" : { },
      "headersFlat" : "",
      "key" : {
        "lv" : "not_specify",
        "key" : "postResult"
      }
    }, {
      "clazz" : "net.bzk.flow.model.Action$PolyglotAction",
      "uid" : "asaxvahgwJpm",
      "name" : "GenBody",
      "tryErrorble" : false,
      "devBoxVars" : { },
      "devFlowVars" : { },
      "code" : "const ans = [];\nconst timeAt = '${direction.last.time}';\nconst price = ${direction.last.val};\nconst reason = '${__pk_result}';\n\nans.push(genPointDto());\n\nfunction genPointDto(){\n  const row = {\n      measurement : 'order-measurement',\n      tags:{\n        symbol : '${symbol}',\n        category:'cryptocurrency',\n        source:'coinmarketcap',\n        trigger:'${trigger}',\n        side:'${side}',\n        reason:reason\n      },\n      field: 'miss_rate',\n      val:price,\n      time :timeAt\n  };\n  return row;\n}\n\nans;\n",
      "polyglot" : "js",
      "resultLv" : "not_specify",
      "resultKey" : "body"
    } ],
    "links" : [ ],
    "vars" : { },
    "taskSort" : [ "asaxvahgwJpm", "65eKSmNiL1nJ" ],
    "whileJudgment" : null,
    "transition" : {
      "toBox" : "",
      "endTag" : "${symbol}-${side}:   ${__pk_result}",
      "failEnd" : false,
      "endResultKeys" : [ {
        "lv" : "not_specify",
        "key" : "direction"
      }, {
        "lv" : "not_specify",
        "key" : "trigger"
      }, {
        "lv" : "not_specify",
        "key" : "thth"
      }, {
        "lv" : "not_specify",
        "key" : "th"
      } ],
      "resultCode" : ""
    }
  }, {
    "clazz" : "net.bzk.flow.model.Box",
    "uid" : "X9XRPTTIQJIQ",
    "name" : "Box",
    "actions" : [ {
      "clazz" : "net.bzk.flow.model.Action$VarModifyAction",
      "uid" : "myTOlctOo6Go",
      "name" : "InitVars",
      "tryErrorble" : false,
      "devBoxVars" : { },
      "devFlowVars" : { },
      "flatData" : [ {
        "key" : "thLineCondition",
        "val" : "!javascript===\nconst side = '${side}';\n\nfunction calc(){\n    return side == 'BUY' ? 'r._value < 0' : 'r._value > 0';\n}\ncalc();"
      } ]
    }, {
      "clazz" : "net.bzk.flow.model.Action$SubFlowAction",
      "uid" : "VKgNyxHcz1m9",
      "name" : "OrderPost",
      "tryErrorble" : false,
      "devBoxVars" : { },
      "devFlowVars" : { },
      "flowUid" : "02eQyaMwyojZ",
      "asynced" : false,
      "inputData" : [ {
        "key" : "investedRate",
        "val" : "!javascript===\nconst ans= ${investedRate} ;\nans;"
      }, {
        "key" : "guardRange",
        "val" : "!javascript===\nconst ans = ${guardRate}\nans;"
      }, {
        "key" : "symbol",
        "val" : "${symbol}"
      }, {
        "key" : "side",
        "val" : "${side}"
      }, {
        "key" : "currentMove",
        "val" : "0.0001868"
      }, {
        "key" : "tags",
        "val" : "[\"shortTerm${side}\"]"
      }, {
        "key" : "trigger",
        "val" : "${trigger}"
      } ],
      "outputReflects" : [ ]
    }, {
      "clazz" : "net.bzk.flow.model.Action$SubFlowAction",
      "uid" : "x2sNttDa4erM",
      "name" : "RiseOrFall",
      "tryErrorble" : false,
      "devBoxVars" : { },
      "devFlowVars" : { },
      "flowUid" : "PeakFinder5",
      "asynced" : false,
      "inputData" : [ {
        "key" : "tsdbQuery",
        "val" : "from(bucket: \"quote\")\r\n  |> range(start: -12h)\r\n  |> filter(fn: (r) =>\r\n    r._measurement == \"realtime\" and\r\n    r._field == \"price\" and\r\n    r.symbol == \"${symbol}\" \r\n  )\r\n  |> map(fn: (r) => ({ r with cp: r._value   }))\r\n  |>movingAverage(n: ${periodN})\r\n  |> map(fn: (r) => ({ r with _value: (r.cp-r._value)/r._value   }))"
      }, {
        "key" : "peakMaxWaitSeconds",
        "val" : "!javascript===\nconst ans = 21*60;\nans;"
      }, {
        "key" : "symbol",
        "val" : "${symbol}"
      }, {
        "key" : "baseVal",
        "val" : "0"
      } ],
      "outputReflects" : [ {
        "srcKey" : "ans",
        "toKey" : {
          "lv" : "run_flow",
          "key" : "direction"
        }
      } ]
    }, {
      "clazz" : "net.bzk.flow.model.Action$SubFlowAction",
      "uid" : "BNyujdRoVPR6",
      "name" : "GetTH",
      "tryErrorble" : false,
      "devBoxVars" : { },
      "devFlowVars" : { },
      "flowUid" : "9RLQvpmbGa35",
      "asynced" : false,
      "inputData" : [ {
        "key" : "tsdbQuery",
        "val" : "from(bucket: \"quote\")\r\n  |> range(start: -6h)\r\n  |> filter(fn: (r) =>\r\n    r._measurement == \"realtime\" and\r\n    r._field == \"price\" and\r\n    r.symbol == \"${symbol}\" \r\n  )\r\n  |> map(fn: (r) => ({ r with cp: r._value   }))\r\n  |>movingAverage(n: ${periodN})\r\n  |> map(fn: (r) => ({ r with _value: (r.cp-r._value)/r._value   }))\r\n  |> map(fn: (r) => ({ r with _value: if ${thLineCondition} then r._value else 0.00 }))\r\n  |>movingAverage(n: ${periodN})\r\n  |> map(fn: (r) => ({ r with _value: r._value*${thRate} }))"
      }, {
        "key" : "vaildMins",
        "val" : "11"
      }, {
        "key" : "skipCount",
        "val" : "0"
      } ],
      "outputReflects" : [ {
        "srcKey" : "nearVal",
        "toKey" : {
          "lv" : "run_flow",
          "key" : "th"
        }
      } ]
    } ],
    "links" : [ {
      "clazz" : "net.bzk.flow.model.Link",
      "uid" : "7SJXjrUlyRji",
      "name" : "CheckDirection",
      "condition" : {
        "clazz" : "net.bzk.flow.model.Condition$ConditionCode",
        "kind" : "NONE",
        "next" : null,
        "polyglot" : "js",
        "code" : "const side = '${side}';\r\nconst macroState = '${direction.macro.state}';\r\nconst microState = '${direction.micro.state}';\r\n\r\nfunction check(){\r\n\r\n    if(side == 'SELL') return macroState == 'RISE'\r\n    if(side == 'BUY') return macroState == 'FALL'\r\n    throw new Error('Whoops! side:'+side);\r\n}\r\ncheck();"
      },
      "transition" : {
        "toBox" : "36vcsdaTkWky",
        "endTag" : null,
        "failEnd" : false,
        "endResultKeys" : [ ],
        "resultCode" : "CheckDirection"
      }
    }, {
      "clazz" : "net.bzk.flow.model.Link",
      "uid" : "Q02zQxrdbatv",
      "name" : "CheckTH",
      "condition" : {
        "clazz" : "net.bzk.flow.model.Condition$ConditionCode",
        "kind" : "NONE",
        "next" : null,
        "polyglot" : "js",
        "code" : "const lastv =  ${direction.last.val};\r\nconst th = ${th.val};\r\nconst side = '${side}';\r\n\r\nfunction calc(){\r\n    if(side == 'SELL') return lastv < th;\r\n    if(side == 'BUY') return lastv > th;\r\n    throw new Error('Whoops! side:'+side);\r\n}\r\n\r\ncalc();\r\n"
      },
      "transition" : {
        "toBox" : "36vcsdaTkWky",
        "endTag" : null,
        "failEnd" : false,
        "endResultKeys" : [ ],
        "resultCode" : "CheckTH"
      }
    }, {
      "clazz" : "net.bzk.flow.model.Link",
      "uid" : "zoj7cYA8G4zB",
      "name" : "CheckTHRange",
      "condition" : {
        "clazz" : "net.bzk.flow.model.Condition$ConditionNum",
        "kind" : "NONE",
        "next" : null,
        "left" : "!javascript===\nlet th = ${th.val};\nlet absth = Math.abs(th);\nabsth;\n",
        "right" : "${thth}",
        "type" : "lessthan"
      },
      "transition" : {
        "toBox" : "36vcsdaTkWky",
        "endTag" : null,
        "failEnd" : false,
        "endResultKeys" : [ ],
        "resultCode" : "CheckDirection"
      }
    } ],
    "vars" : {
      "avgPeriod" : "30m"
    },
    "taskSort" : [ "myTOlctOo6Go", "x2sNttDa4erM", "BNyujdRoVPR6", "Q02zQxrdbatv", "7SJXjrUlyRji", "zoj7cYA8G4zB", "VKgNyxHcz1m9" ],
    "whileJudgment" : null,
    "transition" : {
      "toBox" : "",
      "endTag" : "OK ${symbol}-${side}:  ${guardRate}",
      "failEnd" : false,
      "endResultKeys" : [ ],
      "resultCode" : ""
    }
  } ],
  "varCfgNames" : [ "fin-proxy.json" ],
  "vars" : {
    "symbol" : "BTC",
    "side" : "BUY",
    "periodN" : 12,
    "thRate" : "1.00",
    "trigger" : "NONE",
    "thth" : 0
  },
  "entry" : {
    "clazz" : "net.bzk.flow.model.Entry$PluginEntry",
    "boxUid" : "X9XRPTTIQJIQ",
    "autoRegister" : false,
    "requiredKeys" : [ "side", "symbol", "guardRate", "thRate", "periodN", "investedRate", "thth", "trigger" ],
    "outputKeys" : [ ]
  },
  "logEncryptKey" : "1234567890123456",
  "threadCfg" : {
    "corePoolSize" : 10,
    "maximumPoolSize" : 50,
    "keepAliveTime" : 500,
    "aliveUnit" : "MINUTES"
  }
}
{
  "clazz" : "net.bzk.flow.model.Flow",
  "uid" : "lReXow3492HG",
  "name" : "FUNC-concat-TSDB",
  "boxs" : [ {
    "clazz" : "net.bzk.flow.model.Box",
    "uid" : "DkbmGZOvv2F7",
    "name" : "Box",
    "actions" : [ {
      "clazz" : "net.bzk.flow.model.Action$VarModifyAction",
      "uid" : "oovQqJqy8kFe",
      "name" : "Loop",
      "tryErrorble" : false,
      "enable" : true,
      "devBoxVars" : { },
      "devFlowVars" : { },
      "minLogLv" : "NONE",
      "flatData" : [ {
        "key" : "idx",
        "val" : "!javascript===\n${idx}+1;"
      }, {
        "key" : "query",
        "val" : "!javascript===\nconst array = ${querys};\nconst idx = ${idx};\narray[idx];"
      } ]
    }, {
      "clazz" : "net.bzk.flow.model.Action$SubFlowAction",
      "uid" : "RZvCk7RvcvcZ",
      "name" : "Call",
      "tryErrorble" : false,
      "enable" : true,
      "devBoxVars" : { },
      "devFlowVars" : { },
      "minLogLv" : "NONE",
      "flowUid" : "9RLQvpmbGa35",
      "asynced" : false,
      "inputData" : [ {
        "key" : "tsdbQuery",
        "val" : "${query}"
      }, {
        "key" : "vaildMins",
        "val" : "!javascript===\nNumber.MAX_SAFE_INTEGER"
      } ],
      "outputReflects" : [ {
        "srcKey" : "trimValues",
        "toKey" : {
          "lv" : "not_specify",
          "key" : "vals"
        }
      } ]
    }, {
      "clazz" : "net.bzk.flow.model.Action$PolyglotAction",
      "uid" : "0gaeqzZkeJPb",
      "name" : "concat",
      "tryErrorble" : false,
      "enable" : true,
      "devBoxVars" : { },
      "devFlowVars" : { },
      "minLogLv" : "NONE",
      "code" : "\r\nlet allVals = ${allVals};\r\nlet vals = ${vals};\r\n\r\nfor (const [key, value] of Object.entries(vals)) {\r\n    if(!value) {\r\n        delete vals[key]; \r\n    }\r\n}\r\n\r\nfor (const [key, value] of Object.entries(allVals)) {\r\n    vals[key]=value;\r\n}\r\n\r\nvals",
      "polyglot" : "js",
      "resultLv" : "not_specify",
      "resultKey" : "allVals"
    } ],
    "links" : [ ],
    "vars" : {
      "allVals" : { },
      "idx" : 0
    },
    "taskSort" : [ "oovQqJqy8kFe", "RZvCk7RvcvcZ", "0gaeqzZkeJPb" ],
    "whileJudgment" : {
      "clazz" : "net.bzk.flow.model.Condition$ConditionNum",
      "kind" : "NONE",
      "next" : null,
      "left" : "${idx}",
      "right" : "!javascript===\nconst qs = ${querys};\nqs.length;",
      "type" : "lessthan"
    },
    "transition" : {
      "toBox" : "",
      "endTag" : "TODO Why",
      "failEnd" : false,
      "endResultKeys" : [ {
        "lv" : "not_specify",
        "key" : "allVals"
      } ],
      "resultCode" : ""
    },
    "minLogLv" : "DEBUG"
  } ],
  "varCfgNames" : [ ],
  "vars" : {
    "querys" : [ "from(bucket: \"quote\")\r\n  |> range(start: -1d )\r\n   |> filter(fn: (r) =>\r\n    r._measurement == \"realtime\" and\r\n    r.symbol == \"BTC\" and\r\n    r._field == \"price\"\r\n  )\r\n", "from(bucket: \"quote\")\r\n  |> range(stop: -1d,start: -2d )\r\n   |> filter(fn: (r) =>\r\n    r._measurement == \"realtime\" and\r\n    r.symbol == \"BTC\" and\r\n    r._field == \"price\"\r\n  )\r\n" ]
  },
  "entry" : {
    "clazz" : "net.bzk.flow.model.Entry$PluginEntry",
    "boxUid" : "DkbmGZOvv2F7",
    "autoRegister" : false,
    "requiredKeys" : [ "querys" ],
    "outputKeys" : [ "allVals" ]
  },
  "threadCfg" : {
    "corePoolSize" : 10,
    "maximumPoolSize" : 50,
    "keepAliveTime" : 500,
    "aliveUnit" : "MINUTES"
  },
  "version" : 19
}
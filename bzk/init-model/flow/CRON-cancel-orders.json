{
  "clazz" : "net.bzk.flow.model.Flow",
  "uid" : "PWyjP6taCWXi",
  "name" : "CRON-cancel-orders",
  "boxs" : [ {
    "clazz" : "net.bzk.flow.model.Box",
    "uid" : "ZbnGsX8FJhlq",
    "name" : "Box",
    "actions" : [ {
      "clazz" : "net.bzk.flow.model.HttpAction",
      "uid" : "CqZK2BeXJdkR",
      "name" : "get_NEW_",
      "tryErrorble" : false,
      "enable" : true,
      "devBoxVars" : { },
      "devFlowVars" : { },
      "minLogLv" : "NONE",
      "url" : "${finExManageApiUrl}",
      "uriVariables" : { },
      "body" : "{\n    \"name\": \"order/query/get\",\n    \"exchange\":\"binance\",\n    \"symbol\": \"${symbol}\",\n    \"status\":\"NEW\",\n    \"__bzk_api_key\": \"${finExManageApiKey}\"\n}",
      "method" : "POST",
      "headers" : { },
      "headersFlat" : "",
      "key" : {
        "lv" : "not_specify",
        "key" : "result"
      }
    }, {
      "clazz" : "net.bzk.flow.model.HttpAction",
      "uid" : "UUgNCLrtUbl3",
      "name" : "GetPosition",
      "tryErrorble" : false,
      "enable" : true,
      "devBoxVars" : { },
      "devFlowVars" : { },
      "minLogLv" : "NONE",
      "url" : "${finExManageApiUrl}",
      "uriVariables" : { },
      "body" : "{\r\n    \"name\": \"position/get\",\r\n    \"__bzk_api_key\": \"${finExManageApiKey}\",\r\n    \"exchange\": \"binance\",\r\n    \"symbol\":\"${symbol}\"\r\n}",
      "method" : "POST",
      "headers" : { },
      "headersFlat" : "",
      "key" : {
        "lv" : "not_specify",
        "key" : "position"
      }
    }, {
      "clazz" : "net.bzk.flow.model.Action$VarModifyAction",
      "uid" : "w8eTa5RYg3u7",
      "name" : "Filiter",
      "tryErrorble" : false,
      "enable" : true,
      "devBoxVars" : { },
      "devFlowVars" : { },
      "minLogLv" : "NONE",
      "flatData" : [ {
        "key" : "stopLongOds",
        "val" : "!javascript===\nconst ft = {\n    positionSide:\"LONG\",\n    orderType:\"STOP_MARKET\"\n};\nconst ftJons = JSON.stringify(ft);\nconst ods = ${result.orders};\nconst odsJson = JSON.stringify(ods);\nconst ans = $orderUtils.filter(odsJson,ftJons);\nans;"
      }, {
        "key" : "stopShortOds",
        "val" : "!javascript===\nconst ft = {\n    positionSide:\"SHORT\",\n    orderType:\"STOP_MARKET\"\n};\nconst ftJons = JSON.stringify(ft);\nconst ods = ${result.orders};\nconst odsJson = JSON.stringify(ods);\nconst ans = $orderUtils.filter(odsJson,ftJons);\nans;"
      }, {
        "key" : "limitOds",
        "val" : "!javascript===\r\nconst ft = {\r\n    orderType:\"LIMIT\"\r\n};\r\nconst ftJons = JSON.stringify(ft);\r\nconst ods = ${result.orders};\r\nconst odsJson = JSON.stringify(ods);\r\nconst ans = $orderUtils.filter(odsJson,ftJons);\r\nans;"
      }, {
        "key" : "takeProfitOds",
        "val" : "!javascript===\nconst ft = {\n    orderType:\"TAKE_PROFIT_MARKET\"\n};\nconst ftJons = JSON.stringify(ft);\nconst ods = ${result.orders};\nconst odsJson = JSON.stringify(ods);\nconst ans = $orderUtils.filter(odsJson,ftJons);\nans;"
      } ]
    }, {
      "clazz" : "net.bzk.flow.model.Action$PolyglotAction",
      "uid" : "mI5kvjAUl9xe",
      "name" : "collect_stop",
      "tryErrorble" : false,
      "enable" : true,
      "devBoxVars" : { },
      "devFlowVars" : { },
      "minLogLv" : "NONE",
      "code" : "!return-json===\r\nlet ans = ${toDelOds};\r\nconst pos = ${position};\r\n\r\nconst longP = getPosBySide('LONG');\r\nconst shortP = getPosBySide('SHORT');\r\nconst stopLongOds = ${stopLongOds};\r\nconst stopShortOds = ${stopShortOds};\r\n\r\n\r\nans= ans.concat(checkOds(longP,stopLongOds));\r\nans= ans.concat(checkOds(shortP,stopShortOds));\r\n\r\nfunction checkOds(p,ods){\r\n    if( Math.abs( p.positionAmt )>0) return [];\r\n    return ods.orders;\r\n}\r\n\r\nfunction getPosBySide(pSide){\r\n    for (const p of pos) {\r\n        if(p.positionSide === pSide) return p;\r\n    }\r\n    throw new Error('not find '+pSide);\r\n}\r\n\r\nJSON.stringify(ans);",
      "polyglot" : "js",
      "resultLv" : "not_specify",
      "resultKey" : "toDelOds"
    }, {
      "clazz" : "net.bzk.flow.model.Action$VarModifyAction",
      "uid" : "QvboCjjxxF3d",
      "name" : "InitVars",
      "tryErrorble" : false,
      "enable" : true,
      "devBoxVars" : { },
      "devFlowVars" : { },
      "minLogLv" : "NONE",
      "flatData" : [ {
        "key" : "symbol",
        "val" : "!javascript===\nconst sbs = ${orderSymbols};\nconst idx = ${symbolIdx};\nconst sb = sbs[idx];\nsb;"
      }, {
        "key" : "symbolIdx",
        "val" : "!javascript===\n${symbolIdx}+1;"
      }, {
        "key" : "toDelOds",
        "val" : "[]"
      } ]
    }, {
      "clazz" : "net.bzk.flow.model.Action$PolyglotAction",
      "uid" : "aD6jPbJPZE3R",
      "name" : "collect-takeProfitAndLimit",
      "tryErrorble" : false,
      "enable" : true,
      "devBoxVars" : { },
      "devFlowVars" : { },
      "minLogLv" : "NONE",
      "code" : "!return-json===\nlet toDelOds = ${toDelOds};\nconst lastPrice = ${binanceQuote.all.avgPrice};\nconst limitOds = ${limitOds.orders};\nconst takeProfitOds = ${takeProfitOds.orders};\n\n\nfunction addFilterOds(ods,keepTime){\n    for (const od of ods) {\n        let odPrice = $orderUtils.getPrice(od);\n        let dp = Math.abs(odPrice - lastPrice);\n        let r = dp / lastPrice;\n       \n\n        let lastD = new Date(od.updateAt);\n        let checkAt = new Date();\n        checkAt.setSeconds(checkAt.getSeconds() - keepTime);\n         if (r>0.08 || lastD<checkAt ) {\n             toDelOds.push(od);\n         }\n      \n    }\n}\n\naddFilterOds(limitOds,60*60*1);\naddFilterOds(takeProfitOds,60*60*2);\n\nJSON.stringify(toDelOds);",
      "polyglot" : "js",
      "resultLv" : "not_specify",
      "resultKey" : "toDelOds"
    }, {
      "clazz" : "net.bzk.flow.model.HttpAction",
      "uid" : "9TkSb5GN94Km",
      "name" : "BinanceQuote",
      "tryErrorble" : false,
      "enable" : true,
      "devBoxVars" : { },
      "devFlowVars" : { },
      "minLogLv" : "NONE",
      "url" : "${finExManageApiUrl}",
      "uriVariables" : { },
      "body" : "{\n    \"name\": \"market/get_recent_trades_list\",\n    \"exchange\": \"binance\",\n    \"symbol\":\"${symbol}\",\n    \"limit\":100,\n    \"timeMaped\":false,\n    \"__bzk_api_key\": \"${finExManageApiKey}\"\n}",
      "method" : "POST",
      "headers" : { },
      "headersFlat" : "",
      "key" : {
        "lv" : "not_specify",
        "key" : "binanceQuote"
      }
    }, {
      "clazz" : "net.bzk.flow.model.HttpAction",
      "uid" : "kAlyLS9yTOMg",
      "name" : "Post",
      "tryErrorble" : false,
      "enable" : true,
      "devBoxVars" : { },
      "devFlowVars" : { },
      "minLogLv" : "NONE",
      "url" : "${finExManageApiUrl}",
      "uriVariables" : { },
      "body" : "{\r\n    \"name\": \"order/clean_orders\",\r\n    \"exchange\": \"binance\",\r\n    \"symbol\": \"${symbol}\",\r\n    \"currentOds\": ${toDelOds},\r\n    \"__bzk_api_key\": \"${finExManageApiKey}\"\r\n}",
      "method" : "POST",
      "headers" : { },
      "headersFlat" : "",
      "key" : {
        "lv" : "not_specify",
        "key" : "callResp"
      }
    } ],
    "links" : [ ],
    "vars" : {
      "symbolIdx" : 0
    },
    "taskSort" : [ "QvboCjjxxF3d", "CqZK2BeXJdkR", "9TkSb5GN94Km", "w8eTa5RYg3u7", "aD6jPbJPZE3R", "UUgNCLrtUbl3", "mI5kvjAUl9xe", "kAlyLS9yTOMg" ],
    "whileJudgment" : {
      "clazz" : "net.bzk.flow.model.Condition$ConditionNum",
      "kind" : "NONE",
      "next" : null,
      "left" : "${symbolIdx}",
      "right" : "!javascript===\nconst sbs = ${orderSymbols};\nconst len= sbs.length;\nlen;",
      "type" : "lessthan"
    },
    "transition" : {
      "toBox" : "",
      "endTag" : "TODO Why",
      "failEnd" : false,
      "endResultKeys" : [ ],
      "resultCode" : ""
    },
    "minLogLv" : "DEBUG"
  } ],
  "varCfgNames" : [ "crypto-symbol.json", "fin-exchange-manage.json" ],
  "vars" : { },
  "entry" : {
    "clazz" : "net.bzk.flow.model.Entry$FixedRateEntry",
    "boxUid" : "ZbnGsX8FJhlq",
    "autoRegister" : true,
    "period" : 20,
    "unit" : "MINUTES",
    "initialDelay" : 0,
    "cronExpression" : null
  },
  "threadCfg" : {
    "corePoolSize" : 10,
    "maximumPoolSize" : 50,
    "keepAliveTime" : 500,
    "aliveUnit" : "MINUTES"
  },
  "version" : 47
}
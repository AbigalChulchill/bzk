{
  "clazz" : "net.bzk.flow.model.Flow",
  "uid" : "eH4vMOnKs3ps",
  "name" : "SUB-strategy-persist",
  "boxs" : [ {
    "clazz" : "net.bzk.flow.model.Box",
    "uid" : "AB8uzjML8NdQ",
    "name" : "Box",
    "actions" : [ {
      "clazz" : "net.bzk.flow.model.Action$PolyglotAction",
      "uid" : "66NmfSdxlftf",
      "name" : "Vars",
      "tryErrorble" : false,
      "enable" : "true",
      "devBoxVars" : { },
      "devFlowVars" : { },
      "minLogLv" : "NONE",
      "code" : "const highLowPersistPoints = $tsFunc.toPoints(${cs.highLowPersistTime});\r\nconst highLowPersistTimeTh= ${strategyCfg.highLowPersistTimeTh};\r\nconst positions = ${position};\r\nconst k5mLow = ${cs.k5m.low};\r\nconst k5mHigh = ${cs.k5m.high};\r\n\r\nfunction getPositionSide(){\r\n    return highLowPersistPoints.get(0).val >0 ? 'SHORT':'LONG';\r\n}\r\n\r\nconst positionSide = getPositionSide();\r\nconst stopPositionSide = positionSide == 'LONG' ? 'SHORT' : 'LONG';\r\nconst tarPostion = positions[stopPositionSide];\r\n$bzk.put('tarPostion',JSON.stringify(tarPostion));\r\n\r\n\r\nfunction getStopPrice(){\r\n\r\n    if(positionSide=='LONG'){\r\n        return k5mLow[highLowPersistPoints.get(0).key];\r\n    }else if(positionSide == 'SHORT'){\r\n        return k5mHigh[highLowPersistPoints.get(0).key];\r\n    }\r\n    throw new Error('getStopPrice not support='+positionSide);\r\n}\r\n\r\nfunction getRate(){\r\n    const size= highLowPersistPoints.size();\r\n    if(positionSide=='LONG'){\r\n        let checkCount = 0;\r\n        for(let i=0;i<size;i++){\r\n            const p = highLowPersistPoints.get(i);\r\n            if( p.val < highLowPersistTimeTh) checkCount++;\r\n\r\n        }\r\n        return checkCount/size;\r\n    }else if(positionSide == 'SHORT'){\r\n        let checkCount = 0;\r\n        for(let i=0;i<size;i++){\r\n            const p = highLowPersistPoints.get(i);\r\n            if( p.val > highLowPersistTimeTh) checkCount++;\r\n\r\n        }\r\n        return checkCount/size;\r\n    }\r\n    throw new Error('getStopPrice not support='+positionSide);\r\n    \r\n}\r\n\r\nfunction genOrderObjJson(){\r\n    const peakPrice=getStopPrice();\r\n    return JSON.stringify({\r\n        \"withdrawAmountRate\": 0.2* getRate(),\r\n        // \"targetPrice\":peakPrice,\r\n        \"stopPrice\": -1,\r\n        // \"gapRate\":-1,\r\n        \"attachName\":'DifTrace',\r\n        \"attach\":{\r\n            \"stopPrice\":peakPrice\r\n        }\r\n    });\r\n}\r\n$bzk.put('highLowPersistPoints',JSON.stringify( highLowPersistPoints));\r\n$bzk.putObj('positionSide',positionSide);\r\n$bzk.put('~orderLimitBody',genOrderObjJson());\r\ntrue;",
      "polyglot" : "js",
      "resultLv" : "not_specify",
      "resultKey" : "vars"
    }, {
      "clazz" : "net.bzk.flow.model.Action$SubFlowAction",
      "uid" : "WjIW7PqQkYER",
      "name" : "LimitOrder",
      "tryErrorble" : false,
      "enable" : "!javascript===\nconst allowPositionSide = ${strategyCfg.allowPositionSide};\nconst positionSide = '${positionSide}';\nallowPositionSide.includes(positionSide);\n",
      "devBoxVars" : { },
      "devFlowVars" : { },
      "minLogLv" : "NONE",
      "flowUid" : "02eQyaMwyojZ",
      "asynced" : false,
      "inputData" : [ {
        "key" : "body",
        "val" : "!javascript===\nconst defaultObj= {\n  \"symbol\": \"${symbol}\",\n  \"size\": 3,\n  \"positionSide\": \"${positionSide}\",\n  \"withdrawAmountRate\": 0.08,\n  \"priceBuffRate\": 1,\n  \"name\": \"order/post\",\n  \"exchange\": \"binance\",\n  \"strategy\": \"LIMIT\",\n  \"proportionalRate\": 1.5,\n  \"closeLoseThreshold\":0.05,\n  \"martingaleRate\":1,\n  \"gapRate\":0.02\n};\nconst mergeObj = ${orderLimitBody};\nconst postObj= Object.assign(defaultObj,mergeObj);\npostObj;"
      }, {
        "key" : "tags",
        "val" : "[\"pt\"]"
      }, {
        "key" : "trigger",
        "val" : "persist"
      } ],
      "outputReflects" : [ ]
    } ],
    "links" : [ {
      "clazz" : "net.bzk.flow.model.Link",
      "uid" : "ARQTOmYaHf9f",
      "name" : "OverTH",
      "condition" : {
        "clazz" : "net.bzk.flow.model.Condition$ConditionNum",
        "kind" : "NONE",
        "next" : null,
        "left" : "!javascript===\nconst highLowPersistPoints = ${highLowPersistPoints};\nMath.abs( highLowPersistPoints[0].val);",
        "right" : "${strategyCfg.highLowPersistTimeTh}",
        "type" : "lessthan_equal"
      },
      "transition" : {
        "toBox" : "",
        "endTag" : "${symbol} ${positionSide} OverTH",
        "failEnd" : false,
        "endResultKeys" : [ {
          "lv" : "not_specify",
          "key" : "cs.difBigger.lastVal"
        } ],
        "resultCode" : "{\n  \"ordered\": false,\n  \"breakName\": \"OverTH\"\n}"
      },
      "enable" : true
    } ],
    "vars" : { },
    "taskSort" : [ "66NmfSdxlftf", "ARQTOmYaHf9f", "WjIW7PqQkYER" ],
    "whileJudgment" : null,
    "transition" : {
      "toBox" : "",
      "endTag" : "${symbol} ${positionSide} LimitStop",
      "failEnd" : false,
      "endResultKeys" : [ ],
      "resultCode" : "{\n  \"ordered\": true,\n  \"breakName\": \"NONE\"\n}"
    },
    "minLogLv" : "DEBUG"
  } ],
  "varCfgNames" : [ ],
  "vars" : { },
  "entry" : {
    "clazz" : "net.bzk.flow.model.Entry$PluginEntry",
    "boxUid" : "AB8uzjML8NdQ",
    "autoRegister" : false,
    "requiredKeys" : [ "__ALL__" ],
    "outputKeys" : [ "__pk_result" ]
  },
  "threadCfg" : {
    "corePoolSize" : 10,
    "maximumPoolSize" : 50,
    "keepAliveTime" : 500,
    "aliveUnit" : "MINUTES"
  },
  "version" : 87
}